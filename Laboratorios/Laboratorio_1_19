{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BmHICCSSlRMX"
   },
   "source": [
    "<img src=\"Archivos/miia.jpg\" width=800x>\n",
    "\n",
    "# Laboratorio 1\n",
    "\n",
    "## Desarrollo de una herramienta analítica usando solo Python\n",
    "\n",
    "Este laboratorio busca evaluar las habilidades relacionadas con la primera parte del curso, correspondiente a las primeras tres semanas. Este enunciado estará disponible desde la semana 2 y deberá entregarse al final de la semana 4 en el enlace correspondiente. Su desarrollo corresponde al 30% de la calificación total del curso.\n",
    "\n",
    "Esta actividad responde directamente al segundo objetivo del curso:\n",
    "* Implementar una herramienta analítica que permita responder una pregunta de negocio para un problema sencillo de analítica de datos, utilizando únicamente algorítmica básica en Python.\n",
    "\n",
    "Al desarrollar este laboratorio pondrás a prueba tus habilidades para: \n",
    "1. Leer datos desde archivos.\n",
    "2. Almacenar datos en  estructuras de Python.\n",
    "3. Crear y llamar funciones correctamente.\n",
    "4. Implementar condicionales diferenciando *if*, *elif* y *else*\n",
    "5. Implementar ciclos diferenciando el propósito de *for* y *while*\n",
    "6. Importar paquetes y utilizar sus funciones.\n",
    "\n",
    "**NOTAS:**\n",
    "- Te recomendamos leer por completo el enunciado del laboratorio antes de comenzar, de forma que tengas claro el propósito completo de la actividad, y puedas desarrollar tu solución apuntando a él desde el comienzo.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "atHP7uLQlRMp"
   },
   "source": [
    "## Contexto: exploración del potencial para asignar becas Uniandes\n",
    "La Universidad de los Andes se ha caracterizado por su compromiso con la generación de impacto en la sociedad a través de diferentes programas de becas. Programas como Quiero Estudiar, o Ser Pilo Paga, entre otros, han sido revolucionarios, al permitir que estudiantes de bajos recursos puedan acceder a una de las universidades privadas más importantes del país.\n",
    "\n",
    "Actualmente, la Universidad quiere evaluar el potencial impacto que tendrían algunos programas de *acción afirmativa* para asignación de becas, con base en información demográfica que ha obtenido a través de encuestas. Se cuenta con información respecto a la edad, género, estado civil, estrato socio-económico, región de proveniencia, desempeño académico y nivel de escolaridad de las personas que han respondido encuestas. Los encargados de diseñar el programa saben que utilizar criterios basados en este tipo de variables es un tema sensible, pero es necesario si se quieren focalizar las oportunidades en poblaciones menos representadas.\n",
    "\n",
    "El objetivo de este laboratorio es crear una herramienta computacional que permita a un tomador de decisiones explorar qué efecto podría tener el uso de diferentes reglas para seleccionar la población que sería beneficiaria de las becas. Puntualmente, se espera que, dadas unas reglas de selección (ej.: pertenecer a cierta región, rango de edad, etc.), la herramienta ofrezca información sobre la población potencialmente beneficiada, de forma que exista un sustento al momento de definir las reglas de selección."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TwTxFQ3NlRMv"
   },
   "source": [
    "## 1. Obtención e inspección de archivos\n",
    "\n",
    "Los datos de encuestas fueron obtenidos como parte de un trabajo de campo, y por limitaciones tecnológicas, solo se cuenta con la información en archivos de texto plano. Cada archivo corresponde a una de las variables antes mencionadas y se puede garantizar que todos relacionan a las personas encuestadas en el mismo orden (i.e., la primera línea de todos los archivos corresponde a datos de la primera persona encuestada, la segunda línea a la segunda persona, etc.).\n",
    "\n",
    "Los archivos con los que se cuenta son:\n",
    "* *edades.txt*: un archivo ordenado con las edades de cada persona de la población encuestada \n",
    "* *género.txt*: un archivo ordenado con el género de cada persona de la población encuestada \n",
    "* *estado_civil.txt*: un archivo ordenado con el estado civil de cada persona de la población encuestada \n",
    "* *escolaridad.txt*: un archivo ordenado con el nivel de escolaridad de cada persona de la población encuestada \n",
    "* *estrato.txt*: un archivo ordenado con el estrato socio-económico de cada persona de la población encuestada\n",
    "* *region.txt*: un archivo ordenado con la región de proveniencia de cada persona de la población encuestada"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mBEoxEeKlRM0"
   },
   "source": [
    "**Misión 1**\n",
    "\n",
    "Poner en variables de Python la información que está en los archivos listados arriba.\n",
    "\n",
    "* *Versión base*: escribe línea a línea el código necesario para poner en variables de Python la información de cada uno de los archivos.\n",
    "\n",
    "* *Milla extra*: escribe una función que sea capaz de hacer lo anterior para un archivo y úsala en un ciclo para automatizar la lectura de los diferentes archivos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "e3HgIi_YlRM5",
    "outputId": "58f7f02a-b430-470d-9d20-cf145fb82e84",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "edad.txt: \n",
      "['36', '66', '24', '55', '26', '69', '79', '54', '51', '80', '30', '64', '40', '53', '47', '24', '76', '65', '38', '37', '71', '51', '51', '33', '24', '71', '78', '75', '38', '49', '49', '53', '62', '26', '67', '68', '70', '57', '47', '30', '44', '22', '30', '64', '21', '54', '35', '52', '27', '20', '59', '40', '23', '58', '71', '77', '70', '31', '19', '31', '75', '63', '79', '67', '46', '79', '30', '19', '64', '52', '79', '35', '74', '18', '22', '58', '77', '22', '73', '59', '18', '46', '35', '38', '80', '65', '41', '46', '36', '46', '56', '37', '67', '20', '46', '62', '70', '31', '20', '64', '78', '66', '45', '43', '70', '43', '24', '58', '62', '60', '80', '73', '73', '57', '42', '51', '52', '58', '39', '43', '66', '32', '49', '44', '57', '39', '21', '27', '31', '28', '44', '80', '71', '33', '22', '78', '60', '70', '62', '45', '78', '78', '42', '21', '44', '38', '19', '31', '58', '69', '34', '69', '80', '20', '59', '29', '33', '29', '44', '55', '47', '26', '47', '20', '43', '27', '29', '21', '70', '69', '45', '69', '34', '28', '50', '79', '29', '53', '36', '39', '57', '62', '42', '51', '57', '67', '52', '58', '36', '27', '70', '21', '55', '50', '46', '75', '54', '80', '61', '78', '21', '76', '61', '67', '66', '27', '74', '21', '21', '55', '45', '21', '22', '30', '64', '78', '52', '61', '19', '53', '43', '66', '34', '43', '70', '27', '53', '40', '32', '33', '63', '69', '22', '58', '23', '44', '65', '20', '39', '54', '24', '54', '50', '59', '20', '19', '19', '36', '48', '59', '25', '74', '36', '57', '66', '60', '56', '48', '68', '60', '50', '30', '36', '78', '75', '36', '80', '48', '74', '47', '40', '71', '57', '46', '77', '29', '77', '65', '35', '29', '36', '53', '22', '28', '61', '40', '57', '20', '43', '54', '54', '18', '75', '45', '39', '41', '56', '71', '54', '58', '79', '30', '75', '45', '38', '55', '24', '68', '30', '24', '52', '29', '76', '25', '58', '65', '53', '64', '32', '74', '18', '52', '48', '65', '42', '77', '31', '63', '35', '48', '71', '48', '70', '57', '32', '45', '68', '23', '26', '37', '34', '27', '49', '57', '42', '67', '70', '59', '29', '20', '42', '18', '48', '41', '77', '68', '79', '49', '24', '24', '23', '73', '27', '32', '80', '39', '74', '47', '44', '54', '46', '77', '55', '34', '74', '21', '69', '69', '62', '35', '21', '24', '75', '67', '71', '49', '28', '56', '58', '68', '42', '60', '44', '37', '69', '75', '27', '57', '52', '22', '76', '48', '78', '79', '28', '50', '35', '66', '66', '58', '22', '23', '74', '38', '31', '39', '55', '18', '66', '30', '57', '28', '50', '24', '76', '18', '44', '80', '54', '43', '50', '79', '67', '63', '53', '71', '19', '38', '53', '65', '20', '45', '25', '75', '66', '25', '24', '33', '43', '66', '33', '46', '53', '36', '50', '76', '80', '74', '64', '22', '41', '20', '75', '54', '72', '38', '24', '67', '32', '50', '35', '21', '54', '64', '29', '29', '38', '47', '27', '73', '26', '69', '35', '70', '25', '19', '80', '60', '39', '76', '34', '59', '49', '23', '34', '23', '24', '50', '54', '66']\n",
      "\n",
      "genero.txt: \n",
      "['masculino', 'masculino', 'femenino', 'masculino', 'otro', 'no binario', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'no binario', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'no binario', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'no binario', 'masculino', 'masculino', 'no binario', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'no binario', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'no binario', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'no binario', 'no binario', 'masculino', 'femenino', 'no binario', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'no binario', 'no binario', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'no binario', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'no binario', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'otro', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'otro', 'femenino', 'no binario', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'no binario', 'no binario', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'otro', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'no binario', 'femenino', 'femenino', 'femenino', 'no binario', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'no binario', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'no binario', 'no binario', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'no binario', 'femenino', 'no binario', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'no binario', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'no binario', 'femenino', 'masculino', 'femenino', 'no binario', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'no binario', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'no binario', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'no binario', 'femenino', 'masculino', 'masculino', 'otro', 'masculino', 'no binario', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'no binario', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'masculino', 'no binario', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'no binario', 'masculino', 'masculino', 'femenino', 'no binario', 'masculino', 'femenino', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'no binario', 'femenino', 'masculino', 'masculino', 'femenino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'femenino', 'otro', 'masculino', 'masculino', 'no binario', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'femenino', 'no binario', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'masculino', 'femenino', 'masculino', 'masculino', 'femenino', 'femenino', 'femenino', 'femenino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'masculino', 'femenino', 'femenino', 'no binario', 'femenino', 'femenino']\n",
      "\n",
      "estado_civil.txt: \n",
      "['casada', 'divorciada', 'divorciada', 'casada', 'divorciada', 'divorciada', 'casada', 'casada', 'soltera', 'soltera', 'soltera', 'casada', 'casada', 'casada', 'divorciada', 'divorciada', 'casada', 'divorciada', 'soltera', 'casada', 'soltera', 'soltera', 'casada', 'casada', 'casada', 'divorciada', 'soltera', 'soltera', 'soltera', 'divorciada', 'casada', 'divorciada', 'casada', 'casada', 'casada', 'divorciada', 'divorciada', 'divorciada', 'casada', 'soltera', 'divorciada', 'soltera', 'divorciada', 'soltera', 'soltera', 'casada', 'casada', 'divorciada', 'casada', 'soltera', 'soltera', 'casada', 'soltera', 'casada', 'viuda', 'divorciada', 'viuda', 'casada', 'divorciada', 'divorciada', 'casada', 'soltera', 'soltera', 'divorciada', 'casada', 'casada', 'divorciada', 'divorciada', 'divorciada', 'soltera', 'casada', 'divorciada', 'soltera', 'casada', 'casada', 'divorciada', 'soltera', 'divorciada', 'casada', 'casada', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'divorciada', 'casada', 'casada', 'casada', 'casada', 'divorciada', 'divorciada', 'casada', 'soltera', 'casada', 'casada', 'casada', 'divorciada', 'casada', 'casada', 'viuda', 'soltera', 'casada', 'casada', 'casada', 'soltera', 'casada', 'casada', 'divorciada', 'viuda', 'soltera', 'soltera', 'divorciada', 'divorciada', 'divorciada', 'casada', 'divorciada', 'casada', 'divorciada', 'casada', 'soltera', 'casada', 'soltera', 'casada', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'casada', 'soltera', 'divorciada', 'casada', 'viuda', 'divorciada', 'casada', 'soltera', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'casada', 'soltera', 'soltera', 'divorciada', 'soltera', 'soltera', 'casada', 'divorciada', 'divorciada', 'casada', 'casada', 'soltera', 'casada', 'divorciada', 'casada', 'divorciada', 'soltera', 'soltera', 'casada', 'casada', 'soltera', 'soltera', 'casada', 'casada', 'viuda', 'soltera', 'soltera', 'casada', 'casada', 'soltera', 'divorciada', 'soltera', 'soltera', 'divorciada', 'divorciada', 'viuda', 'casada', 'casada', 'soltera', 'divorciada', 'soltera', 'casada', 'soltera', 'casada', 'casada', 'casada', 'casada', 'divorciada', 'divorciada', 'casada', 'soltera', 'casada', 'soltera', 'casada', 'casada', 'casada', 'casada', 'soltera', 'soltera', 'casada', 'casada', 'soltera', 'casada', 'divorciada', 'casada', 'casada', 'divorciada', 'casada', 'casada', 'casada', 'casada', 'casada', 'casada', 'casada', 'divorciada', 'casada', 'soltera', 'soltera', 'divorciada', 'casada', 'casada', 'divorciada', 'divorciada', 'soltera', 'soltera', 'soltera', 'divorciada', 'divorciada', 'casada', 'casada', 'soltera', 'soltera', 'divorciada', 'divorciada', 'soltera', 'soltera', 'viuda', 'soltera', 'divorciada', 'casada', 'casada', 'casada', 'divorciada', 'casada', 'divorciada', 'divorciada', 'soltera', 'casada', 'soltera', 'divorciada', 'casada', 'divorciada', 'soltera', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'casada', 'divorciada', 'casada', 'soltera', 'soltera', 'divorciada', 'casada', 'divorciada', 'divorciada', 'casada', 'soltera', 'casada', 'soltera', 'soltera', 'divorciada', 'soltera', 'divorciada', 'soltera', 'soltera', 'divorciada', 'divorciada', 'viuda', 'casada', 'soltera', 'soltera', 'casada', 'soltera', 'divorciada', 'divorciada', 'casada', 'soltera', 'soltera', 'soltera', 'casada', 'casada', 'casada', 'divorciada', 'divorciada', 'divorciada', 'soltera', 'casada', 'soltera', 'soltera', 'casada', 'casada', 'casada', 'viuda', 'soltera', 'divorciada', 'soltera', 'casada', 'casada', 'divorciada', 'divorciada', 'casada', 'soltera', 'soltera', 'soltera', 'soltera', 'soltera', 'casada', 'soltera', 'soltera', 'soltera', 'casada', 'viuda', 'divorciada', 'casada', 'divorciada', 'viuda', 'casada', 'soltera', 'casada', 'soltera', 'casada', 'divorciada', 'casada', 'divorciada', 'soltera', 'casada', 'casada', 'divorciada', 'soltera', 'soltera', 'soltera', 'casada', 'casada', 'divorciada', 'soltera', 'casada', 'soltera', 'divorciada', 'soltera', 'soltera', 'divorciada', 'divorciada', 'casada', 'casada', 'soltera', 'soltera', 'divorciada', 'casada', 'casada', 'casada', 'soltera', 'divorciada', 'casada', 'casada', 'soltera', 'casada', 'divorciada', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'casada', 'divorciada', 'soltera', 'soltera', 'casada', 'soltera', 'casada', 'divorciada', 'casada', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'casada', 'soltera', 'divorciada', 'casada', 'soltera', 'casada', 'divorciada', 'casada', 'divorciada', 'casada', 'divorciada', 'casada', 'soltera', 'soltera', 'casada', 'divorciada', 'soltera', 'soltera', 'casada', 'casada', 'casada', 'casada', 'divorciada', 'soltera', 'divorciada', 'divorciada', 'casada', 'divorciada', 'soltera', 'soltera', 'casada', 'soltera', 'casada', 'casada', 'casada', 'casada', 'casada', 'divorciada', 'soltera', 'casada', 'divorciada', 'casada', 'divorciada', 'casada', 'casada', 'soltera', 'casada', 'casada', 'soltera', 'casada', 'soltera', 'casada', 'casada', 'soltera', 'casada', 'casada', 'soltera', 'divorciada', 'casada', 'soltera', 'soltera', 'casada', 'divorciada', 'casada', 'casada', 'casada', 'divorciada', 'soltera', 'casada', 'casada', 'casada', 'soltera', 'divorciada', 'soltera', 'casada', 'divorciada', 'soltera', 'casada', 'viuda', 'casada', 'casada', 'casada', 'soltera', 'soltera', 'casada', 'viuda', 'divorciada', 'soltera', 'divorciada', 'casada', 'casada', 'soltera', 'casada', 'divorciada', 'casada', 'casada', 'viuda', 'soltera', 'divorciada', 'divorciada', 'soltera', 'soltera', 'soltera', 'soltera', 'soltera', 'casada', 'casada', 'casada', 'casada', 'divorciada', 'soltera', 'casada', 'viuda', 'casada', 'divorciada', 'casada']\n",
      "\n",
      "escolaridad.txt: \n",
      "['Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Primaria', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Maestria', 'Profesional', 'Secundaria', 'Primaria', 'Secundaria', 'Profesional', 'Profesional', 'Primaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Maestria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Primaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Primaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Profesional', 'Profesional', 'Profesional', 'Secundaria', 'Profesional', 'Profesional', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Primaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Profesional', 'Profesional', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Maestria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Primaria', 'Primaria', 'Maestria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Profesional', 'Profesional', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Primaria', 'Primaria', 'Secundaria', 'Profesional', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Primaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Maestria', 'Secundaria', 'Profesional', 'Maestria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Secundaria', 'Profesional', 'Maestria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria', 'Primaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Profesional', 'Secundaria', 'Secundaria', 'Secundaria', 'Secundaria', 'Profesional', 'Secundaria', 'Secundaria']\n",
      "\n",
      "estrato.txt: \n",
      "['5', '1', '3', '3', '2', '3', '4', '2', '2', '3', '2', '2', '2', '3', '1', '1', '3', '2', '3', '2', '3', '1', '2', '2', '3', '1', '3', '3', '3', '1', '1', '2', '2', '2', '2', '2', '2', '2', '5', '1', '2', '2', '3', '2', '2', '3', '2', '2', '2', '3', '3', '2', '3', '4', '2', '3', '1', '2', '1', '2', '3', '1', '2', '1', '3', '2', '2', '3', '2', '2', '2', '3', '2', '2', '3', '1', '3', '1', '2', '3', '4', '2', '2', '1', '2', '2', '1', '4', '3', '1', '3', '2', '1', '1', '3', '1', '2', '4', '2', '5', '1', '2', '1', '3', '1', '2', '1', '1', '1', '3', '2', '1', '3', '2', '4', '2', '2', '3', '2', '1', '3', '3', '4', '2', '3', '3', '3', '3', '1', '4', '3', '1', '2', '1', '3', '3', '2', '2', '3', '2', '1', '2', '4', '3', '3', '3', '2', '3', '2', '3', '2', '2', '3', '4', '2', '3', '2', '1', '2', '3', '2', '3', '1', '1', '2', '1', '1', '1', '4', '2', '2', '2', '2', '3', '3', '1', '2', '2', '2', '3', '1', '4', '2', '3', '1', '3', '2', '2', '3', '2', '3', '2', '3', '1', '2', '4', '5', '1', '3', '2', '2', '1', '3', '2', '3', '3', '4', '2', '2', '1', '3', '2', '2', '1', '1', '3', '1', '1', '2', '3', '4', '2', '2', '2', '3', '2', '3', '3', '3', '2', '1', '3', '1', '3', '1', '3', '3', '2', '2', '1', '2', '3', '5', '2', '1', '2', '2', '3', '1', '3', '1', '4', '2', '1', '3', '2', '3', '3', '3', '5', '2', '2', '2', '2', '2', '1', '3', '3', '3', '1', '2', '4', '2', '3', '2', '3', '2', '4', '3', '1', '2', '1', '4', '1', '3', '4', '1', '1', '1', '1', '1', '3', '3', '3', '3', '2', '5', '3', '2', '1', '3', '4', '3', '2', '2', '1', '3', '3', '2', '1', '3', '3', '3', '1', '2', '2', '3', '1', '1', '3', '4', '1', '2', '3', '4', '3', '3', '3', '2', '2', '2', '1', '3', '1', '1', '3', '2', '2', '2', '3', '2', '2', '2', '3', '2', '2', '2', '1', '3', '2', '4', '5', '2', '2', '5', '2', '2', '1', '3', '1', '5', '1', '3', '1', '4', '3', '2', '2', '1', '2', '2', '4', '4', '3', '3', '3', '1', '1', '4', '3', '2', '1', '2', '3', '4', '1', '2', '1', '2', '4', '2', '3', '4', '4', '4', '2', '2', '3', '1', '3', '3', '2', '3', '2', '4', '2', '1', '2', '3', '2', '2', '3', '1', '2', '3', '2', '3', '2', '3', '2', '3', '1', '1', '3', '2', '2', '2', '1', '3', '3', '2', '5', '2', '3', '1', '1', '3', '3', '2', '3', '2', '1', '3', '3', '1', '2', '2', '2', '3', '2', '3', '1', '2', '3', '3', '1', '2', '1', '2', '2', '1', '5', '1', '2', '3', '2', '1', '3', '1', '3', '3', '3', '3', '2', '2', '2', '2', '3', '2', '3', '1', '4', '2', '3', '3', '2', '2', '3', '3', '1', '3', '2', '2', '1', '1', '5', '1', '1', '2', '2']\n",
      "\n",
      "region.txt: \n",
      "['Andina', 'Andina', 'Pacifica', 'Pacifica', 'Orinoquia', 'Caribe', 'Amazonia', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Pacifica', 'Caribe', 'Pacifica', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Orinoquia', 'Pacifica', 'Pacifica', 'Caribe', 'Pacifica', 'Orinoquia', 'Andina', 'Andina', 'Caribe', 'Caribe', 'Amazonia', 'Orinoquia', 'Caribe', 'Pacifica', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Orinoquia', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Andina', 'Pacifica', 'Orinoquia', 'Pacifica', 'Pacifica', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Orinoquia', 'Andina', 'Andina', 'Pacifica', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Pacifica', 'Caribe', 'Amazonia', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Andina', 'Andina', 'Pacifica', 'Caribe', 'Amazonia', 'Orinoquia', 'Orinoquia', 'Andina', 'Pacifica', 'Amazonia', 'Pacifica', 'Caribe', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Pacifica', 'Andina', 'Andina', 'Andina', 'Orinoquia', 'Caribe', 'Andina', 'Andina', 'Orinoquia', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Orinoquia', 'Caribe', 'Caribe', 'Orinoquia', 'Andina', 'Pacifica', 'Caribe', 'Pacifica', 'Andina', 'Caribe', 'Caribe', 'Andina', 'Orinoquia', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Andina', 'Caribe', 'Andina', 'Andina', 'Andina', 'Andina', 'Andina', 'Pacifica', 'Andina', 'Orinoquia', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Pacifica', 'Pacifica', 'Andina', 'Andina', 'Caribe', 'Pacifica', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Andina', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Andina', 'Pacifica', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Pacifica', 'Andina', 'Andina', 'Caribe', 'Pacifica', 'Orinoquia', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Orinoquia', 'Amazonia', 'Caribe', 'Caribe', 'Orinoquia', 'Caribe', 'Pacifica', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Orinoquia', 'Andina', 'Andina', 'Caribe', 'Andina', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Orinoquia', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Amazonia', 'Orinoquia', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Andina', 'Orinoquia', 'Caribe', 'Andina', 'Pacifica', 'Caribe', 'Andina', 'Pacifica', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Amazonia', 'Caribe', 'Caribe', 'Andina', 'Caribe', 'Pacifica', 'Andina', 'Pacifica', 'Andina', 'Pacifica', 'Pacifica', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Andina', 'Andina', 'Andina', 'Orinoquia', 'Pacifica', 'Caribe', 'Andina', 'Caribe', 'Andina', 'Pacifica', 'Andina', 'Caribe', 'Pacifica', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Orinoquia', 'Pacifica', 'Caribe', 'Amazonia', 'Andina', 'Andina', 'Andina', 'Caribe', 'Andina', 'Orinoquia', 'Pacifica', 'Andina', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Pacifica', 'Amazonia', 'Andina', 'Orinoquia', 'Andina', 'Andina', 'Orinoquia', 'Pacifica', 'Caribe', 'Pacifica', 'Caribe', 'Andina', 'Pacifica', 'Pacifica', 'Andina', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Caribe', 'Orinoquia', 'Andina', 'Orinoquia', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Andina', 'Caribe', 'Andina', 'Andina', 'Caribe', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Andina', 'Pacifica', 'Andina', 'Andina', 'Caribe', 'Caribe', 'Orinoquia', 'Pacifica', 'Andina', 'Pacifica', 'Caribe', 'Pacifica', 'Andina', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Andina', 'Caribe', 'Andina', 'Andina', 'Pacifica', 'Pacifica', 'Caribe', 'Pacifica', 'Orinoquia', 'Caribe', 'Andina', 'Caribe', 'Pacifica', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Andina', 'Andina', 'Amazonia', 'Pacifica', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Andina', 'Pacifica', 'Caribe', 'Pacifica', 'Pacifica', 'Pacifica', 'Andina', 'Andina', 'Andina', 'Andina', 'Pacifica', 'Andina', 'Andina', 'Andina', 'Andina', 'Pacifica', 'Pacifica', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Pacifica', 'Pacifica', 'Andina', 'Andina', 'Pacifica', 'Andina', 'Caribe', 'Andina', 'Orinoquia', 'Pacifica', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Andina', 'Amazonia', 'Pacifica', 'Caribe', 'Andina', 'Andina', 'Orinoquia', 'Caribe', 'Andina', 'Pacifica', 'Pacifica', 'Andina', 'Andina', 'Pacifica', 'Pacifica', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Andina', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Caribe', 'Andina', 'Caribe', 'Pacifica', 'Caribe', 'Andina', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Amazonia', 'Pacifica', 'Andina', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Caribe', 'Andina', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Caribe', 'Pacifica', 'Pacifica', 'Caribe', 'Caribe', 'Caribe', 'Andina', 'Caribe', 'Amazonia', 'Caribe', 'Andina', 'Pacifica', 'Caribe', 'Andina', 'Pacifica', 'Caribe', 'Andina', 'Pacifica', 'Amazonia', 'Caribe', 'Andina', 'Caribe', 'Andina', 'Andina', 'Caribe', 'Caribe', 'Andina', 'Andina', 'Andina', 'Pacifica']\n",
      "\n",
      "promedio.txt: \n",
      "['2.4', '0.9', '3.2', '2.1', '2.1', '2.0', '2.7', '4.9', '2.1', '4.5', '3.0', '3.0', '3.5', '1.8', '1.2', '0.1', '1.0', '3.9', '2.9', '3.0', '3.0', '3.0', '4.3', '2.3', '2.6', '2.3', '3.0', '2.8', '1.0', '2.9', '3.7', '3.2', '3.3', '3.9', '2.6', '2.4', '3.9', '1.8', '3.3', '2.1', '1.9', '1.7', '2.5', '2.9', '1.5', '4.1', '0.9', '3.0', '2.3', '4.5', '2.8', '3.8', '3.3', '3.9', '3.0', '2.7', '2.4', '1.1', '2.6', '3.1', '4.9', '3.1', '3.0', '2.1', '2.2', '2.3', '3.3', '0.8', '1.7', '3.9', '4.3', '2.1', '1.5', '2.1', '4.0', '3.1', '2.9', '0.0', '2.5', '4.0', '2.3', '3.3', '3.5', '1.2', '3.0', '3.4', '2.7', '0.0', '2.1', '2.2', '3.4', '2.6', '3.8', '1.8', '2.0', '2.4', '4.0', '1.9', '1.8', '3.4', '2.6', '3.0', '3.1', '3.1', '3.5', '2.1', '2.2', '3.7', '4.1', '4.7', '3.6', '3.6', '1.4', '3.9', '1.4', '3.8', '1.6', '1.7', '1.8', '3.0', '3.6', '2.1', '2.2', '3.7', '2.7', '2.5', '1.3', '1.2', '2.1', '1.3', '3.2', '1.5', '2.6', '1.2', '4.2', '1.9', '3.6', '4.8', '4.0', '2.8', '3.6', '1.3', '2.2', '1.8', '2.4', '4.0', '3.5', '3.4', '3.0', '3.8', '0.2', '3.4', '3.5', '2.9', '2.0', '1.7', '2.5', '2.3', '1.2', '4.6', '2.3', '4.4', '4.9', '3.7', '0.1', '3.0', '2.0', '1.5', '3.6', '3.8', '2.4', '1.6', '2.8', '3.4', '3.1', '3.8', '3.0', '2.9', '1.5', '3.6', '2.3', '3.0', '3.0', '1.3', '1.1', '3.3', '2.4', '3.1', '3.9', '2.8', '3.1', '3.0', '1.3', '3.9', '3.8', '3.1', '2.4', '2.2', '2.4', '2.4', '0.9', '3.4', '3.7', '2.8', '2.5', '2.1', '2.3', '4.9', '1.3', '2.5', '3.6', '0.2', '3.0', '4.1', '3.2', '2.3', '2.7', '2.6', '2.9', '1.8', '2.9', '2.0', '4.4', '2.4', '3.3', '1.0', '2.1', '2.1', '3.0', '2.4', '3.0', '1.3', '1.4', '3.2', '3.3', '2.5', '2.6', '1.6', '1.1', '2.4', '3.8', '0.5', '3.3', '5.0', '2.1', '2.0', '0.5', '3.4', '3.5', '0.3', '4.0', '0.4', '3.5', '4.0', '3.5', '1.4', '4.2', '1.1', '2.0', '4.8', '0.8', '2.5', '4.2', '1.9', '0.9', '3.0', '3.2', '1.0', '1.9', '2.6', '3.3', '2.3', '3.0', '3.0', '2.0', '1.0', '1.5', '2.0', '2.9', '0.7', '1.2', '4.0', '1.9', '4.8', '1.4', '2.7', '2.7', '4.3', '0.6', '4.0', '1.1', '3.7', '2.3', '2.1', '3.7', '3.0', '2.4', '2.2', '3.0', '3.0', '3.5', '0.9', '3.5', '2.7', '3.0', '3.7', '1.0', '3.0', '4.4', '0.9', '2.7', '3.6', '2.5', '2.2', '3.6', '1.9', '3.1', '0.2', '3.1', '4.0', '2.3', '3.8', '1.3', '3.5', '1.2', '2.6', '3.2', '2.6', '1.9', '3.0', '3.7', '3.6', '1.1', '2.8', '2.0', '3.2', '3.5', '4.0', '3.6', '2.3', '3.0', '3.6', '1.9', '0.6', '2.0', '0.6', '0.9', '3.3', '2.1', '2.7', '2.5', '2.9', '3.5', '2.9', '1.6', '4.4', '3.9', '3.5', '3.2', '2.0', '2.2', '4.0', '2.9', '4.9', '2.6', '2.2', '3.8', '3.7', '3.6', '3.0', '3.4', '2.6', '2.0', '2.4', '3.9', '1.5', '5.0', '3.9', '3.7', '1.2', '1.8', '0.4', '2.5', '0.0', '3.4', '4.7', '3.6', '2.0', '2.2', '1.7', '3.1', '2.4', '3.1', '0.0', '4.8', '2.7', '1.1', '3.5', '4.3', '1.0', '3.7', '2.1', '1.8', '3.2', '2.2', '0.1', '1.6', '3.0', '2.8', '4.5', '2.0', '1.0', '1.0', '2.9', '1.5', '1.2', '3.2', '0.2', '2.1', '2.5', '1.9', '2.9', '4.2', '0.5', '0.2', '0.6', '3.1', '3.1', '4.2', '2.7', '3.0', '1.0', '2.5', '4.0', '4.0', '0.3', '0.3', '2.9', '2.1', '2.0', '2.5', '1.1', '3.6', '3.1', '3.1', '1.7', '3.0', '3.5', '1.3', '1.7', '3.4', '3.2', '4.5', '4.2', '4.1', '3.5', '3.0', '0.1', '3.8', '0.2', '3.4', '2.0', '3.3', '1.9', '0.7', '1.3', '3.7', '3.5', '2.3', '2.7', '3.4', '4.9', '3.7', '1.8', '2.4', '3.2', '0.6', '3.4', '4.6', '3.2', '2.2', '2.2', '3.5', '2.2', '1.4', '0.1', '3.1', '0.2', '3.3', '3.7', '2.0', '4.9', '3.4', '0.8', '2.4', '2.1', '2.9', '2.1', '2.7', '3.0']\n",
      "\n",
      "[['ID']\n",
      " ['edad']\n",
      " ['genero']\n",
      " ['estado_civil']\n",
      " ['escolaridad']\n",
      " ['estrato']\n",
      " ['region']\n",
      " ['promedio']\n",
      " ['Beca']]\n",
      "\n",
      "[['ID' '1' '2' ... '498' '499' '500']\n",
      " ['edad' '36' '66' ... '50' '54' '66']\n",
      " ['genero' 'masculino' 'masculino' ... 'no binario' 'femenino' 'femenino']\n",
      " ...\n",
      " ['region' 'Andina' 'Andina' ... 'Andina' 'Andina' 'Pacifica']\n",
      " ['promedio' '2.4' '0.9' ... '2.1' '2.7' '3.0']\n",
      " ['Beca' 'NO' 'NO' ... 'NO' 'NO' 'NO']]\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "\n",
    "#Versión base:\n",
    "archivo1 = open('edad.txt','r')\n",
    "archivo_edad = archivo1.read()\n",
    "\n",
    "archivo2 = open('genero.txt','r')\n",
    "archivo_genero = archivo2.read()\n",
    "\n",
    "archivo3 = open('estado_civil.txt','r')\n",
    "archivo_estado_civil = archivo3.read()\n",
    "\n",
    "archivo4 = open('escolaridad.txt','r')\n",
    "archivo_escolaridad = archivo4.read()\n",
    "\n",
    "archivo5 = open('estrato.txt','r')\n",
    "archivo_estrato = archivo5.read()\n",
    "\n",
    "archivo6 = open('region.txt','r')\n",
    "archivo_region = archivo6.read()\n",
    "\n",
    "archivo7 = open('promedio.txt','r')\n",
    "archivo_promedio = archivo7.read()\n",
    "\n",
    "#Milla extra:\n",
    "def leer_archivo(archivo):\n",
    "  with open(archivo) as a:\n",
    "    archivo_estructurado = a.readlines()\n",
    "\n",
    "  return archivo_estructurado\n",
    "\n",
    "archivos = ['edad.txt','genero.txt','estado_civil.txt','escolaridad.txt','estrato.txt','region.txt','promedio.txt']\n",
    "\n",
    "datos_archivos = []\n",
    "for i in range(len(archivos)):\n",
    "  archivo_r = leer_archivo(archivos[i])\n",
    "  for j in range(len(archivo_r)):\n",
    "    archivo_r[j] = archivo_r[j].replace('\\n',\"\")\n",
    "  print(str(archivos[i])+\": \")\n",
    "  print(archivo_r)\n",
    "  print(\"\")\n",
    "  datos_archivos.append(archivo_r)\n",
    "\n",
    "ID_datos = list(range(1,len(datos_archivos[0])+1))\n",
    "datos_archivos.insert(0, ID_datos)\n",
    "\n",
    "nombres_filas_matriz = archivos\n",
    "for i in range(len(nombres_filas_matriz)):\n",
    "  nombres_filas_matriz[i] = nombres_filas_matriz[i].replace('.txt',\"\")\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "nombres_filas_matriz = np.insert(nombres_filas_matriz,0,'ID')\n",
    "nombres_filas_matriz = np.append(nombres_filas_matriz,'Beca',axis = None)\n",
    "\n",
    "matriz_nombres = np.array(nombres_filas_matriz)\n",
    "\n",
    "matriz_nombres = np.reshape(matriz_nombres, (9,1))\n",
    "print(matriz_nombres)\n",
    "print(\"\")\n",
    "\n",
    "matriz_datos = np.array(datos_archivos)\n",
    "\n",
    "filas, columnas = matriz_datos.shape\n",
    "\n",
    "lista_NO = []\n",
    "for i in range(columnas):\n",
    "  lista_NO.append('NO')\n",
    "\n",
    "array_NO = np.array(lista_NO)\n",
    "array_NO = np.reshape(array_NO, (1,500))\n",
    "\n",
    "matriz_datos = np.append(matriz_datos, array_NO, axis = 0)\n",
    "\n",
    "matriz_datos = np.concatenate((matriz_nombres,matriz_datos), axis = 1)\n",
    "print(matriz_datos)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xJoOdmidlRM8"
   },
   "source": [
    "**Misión 2**\n",
    "\n",
    "Reportar las principales características en los datos.\n",
    "* *Versión base*: utilizar métricas básicas como conteos o promedios por categorías en los datos.\n",
    "* *Milla extra*: utilizar visualizaciones simples como diagramas de barras, de pastel u otros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 810
    },
    "id": "8t9SJEHplRM_",
    "outputId": "b45420c1-c024-4553-9658-05a79b2b8564"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Información descriptiva general\n",
      "\n",
      "Promedio edad: 48.748\n",
      "Promedio estrato: 2.308\n",
      "Promedio de promedios: 2.6212\n",
      "Mediana de edad: 49\n",
      "Mediana de estrato: 2\n",
      "Mediana de promedio: 2.7\n",
      "Desviación estándar edad: 18.59485133040864\n",
      "Desviación estándar estrato: 0.9762868430947917\n",
      "Desviación estándar promedio: 0.9762868430947917\n",
      "\n",
      "Frecuencia por género\n",
      "{'femenino': 251, 'masculino': 204, 'no binario': 39, 'otro': 6}\n",
      "\n",
      "Frecuencia por estado civil\n",
      "{'casada': 199, 'divorciada': 137, 'soltera': 148, 'viuda': 16}\n",
      "\n",
      "Frecuencia por escolaridad\n",
      "{'Maestria': 15, 'Primaria': 25, 'Profesional': 117, 'Secundaria': 343}\n",
      "\n",
      "Frecuencia por región\n",
      "{'Amazonia': 15, 'Andina': 142, 'Caribe': 193, 'Orinoquia': 33, 'Pacifica': 117}\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "\n",
    "#Versión base:\n",
    "def ejecutar_conteo(lista_datos):\n",
    "  conteo_datos = len(lista_datos)\n",
    "  return conteo_datos\n",
    "\n",
    "# importación de paquetes necesarios\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "\n",
    "# función que calcula la mediana de una lista de datos numéricos\n",
    "def mediana_datos_decimales(lista_datos):\n",
    "  lista_datos_decimales = list(map(float, lista_datos))\n",
    "  lista_ordenada = sorted(lista_datos_decimales)\n",
    "  posicion_mediana = int((len(lista_ordenada)/2))\n",
    "  return lista_ordenada[posicion_mediana]\n",
    "\n",
    "def mediana_datos_enteros(lista_datos):\n",
    "  lista_datos_enteros = list(map(int, lista_datos))\n",
    "  lista_ordenada = sorted(lista_datos_enteros)\n",
    "  posicion_mediana = int((len(lista_ordenada)/2))\n",
    "  return lista_ordenada[posicion_mediana]\n",
    "\n",
    "def promedio (lista_datos):\n",
    "    lista_datos_enteros = list(map(int, lista_datos))\n",
    "    media_datos = np.mean(lista_datos_enteros)\n",
    "    return media_datos\n",
    "\n",
    "def promedio_decimales (lista_datos):\n",
    "    lista_datos_enteros = list(map(float, lista_datos))\n",
    "    media_datos = np.mean(lista_datos_enteros)\n",
    "    return media_datos\n",
    "\n",
    "# función que calcula la desviación de una lista de datos numéricos\n",
    "def desviacion_estandar(lista_datos):\n",
    "  lista_datos_enteros = list(map(int, lista_datos))\n",
    "  media_datos = np.mean(lista_datos_enteros)\n",
    "\n",
    "  sumatoria = 0\n",
    "  for i in range(len(lista_datos_enteros)):\n",
    "    dato = (lista_datos_enteros[i] - media_datos)**2\n",
    "    sumatoria+=dato\n",
    "\n",
    "  division = sumatoria/len(lista_datos_enteros)\n",
    "  \n",
    "  raiz_sumatoria = math.sqrt(division)\n",
    "  return raiz_sumatoria\n",
    "\n",
    "def desviacion_estandar_decimales(lista_datos):\n",
    "  lista_datos_enteros = list(map(float, lista_datos))\n",
    "  media_datos = np.mean(lista_datos_enteros)\n",
    "\n",
    "  sumatoria = 0\n",
    "  for i in range(len(lista_datos_enteros)):\n",
    "    dato = (lista_datos_enteros[i] - media_datos)**2\n",
    "    sumatoria+=dato\n",
    "\n",
    "  division = sumatoria/len(lista_datos_enteros)\n",
    "  \n",
    "  raiz_sumatoria = math.sqrt(division)\n",
    "  return raiz_sumatoria\n",
    "\n",
    "'''\n",
    "función que visualiza las características de una población dada\n",
    "(nota que la variable 'poblacion' es local; podemos pasar cualquier población a la función)\n",
    "\n",
    "'''\n",
    "\n",
    "#Nombre fila de matriz:\n",
    "#matriz_datos[0,:] = ID\n",
    "#matriz_datos[1,:] = edad\n",
    "#matriz_datos[2,:] = género\n",
    "#matriz_datos[3,:] = estado civil\n",
    "#matriz_datos[4,:] = escolaridad\n",
    "#matriz_datos[5,:] = estrato\n",
    "#matriz_datos[6,:] = región\n",
    "#matriz_datos[7,:] = promedio\n",
    "#matriz_datos[8,:] = Beca\n",
    "\n",
    "#Milla extra:\n",
    "\n",
    "print(\"Información descriptiva general\")\n",
    "print(\"\")\n",
    "print(\"Promedio edad: \"+str (promedio(datos_archivos[1])))\n",
    "print(\"Promedio estrato: \"+str (promedio(datos_archivos[5])))\n",
    "print(\"Promedio de promedios: \"+str (promedio_decimales(datos_archivos[7])))\n",
    "print(\"Mediana de edad: \"+str (mediana_datos_enteros(datos_archivos[1])))\n",
    "print(\"Mediana de estrato: \"+str (mediana_datos_enteros(datos_archivos[5])))\n",
    "print(\"Mediana de promedio: \"+str (mediana_datos_decimales(datos_archivos[7])))\n",
    "print(\"Desviación estándar edad: \"+ str (desviacion_estandar(datos_archivos[1])))\n",
    "print(\"Desviación estándar estrato: \"+str (desviacion_estandar(datos_archivos[5])))\n",
    "print(\"Desviación estándar promedio: \"+str (desviacion_estandar_decimales(datos_archivos[5])))\n",
    "print(\"\")\n",
    "\n",
    "print(\"Frecuencia por género\")\n",
    "genero, frecuencia = np.unique(matriz_datos[2,1:], return_counts=True)\n",
    "frecuencia_genero = dict(zip(genero, frecuencia))\n",
    "print(frecuencia_genero)\n",
    "print(\"\")\n",
    "\n",
    "print(\"Frecuencia por estado civil\")\n",
    "estado_civil, frecuencia = np.unique(matriz_datos[3,1:], return_counts=True)\n",
    "frecuencia_estado_civil = dict(zip(estado_civil, frecuencia))\n",
    "print(frecuencia_estado_civil)\n",
    "print(\"\")\n",
    "\n",
    "print(\"Frecuencia por escolaridad\")\n",
    "escolaridad, frecuencia = np.unique(matriz_datos[4,1:], return_counts=True)\n",
    "frecuencia_escolaridad = dict(zip(escolaridad, frecuencia))\n",
    "print(frecuencia_escolaridad)\n",
    "print(\"\")\n",
    "\n",
    "print(\"Frecuencia por región\")\n",
    "region, frecuencia = np.unique(matriz_datos[6,1:], return_counts=True)\n",
    "frecuencia_region = dict(zip(region, frecuencia))\n",
    "print(frecuencia_region)\n",
    "print(\"\")\n",
    "\n",
    "frecuencia_r_amazonia = frecuencia_region.get(\"Amazonia\")\n",
    "frecuencia_r_andina = frecuencia_region.get(\"Andina\")\n",
    "frecuencia_r_caribe = frecuencia_region.get(\"Caribe\")\n",
    "frecuencia_r_orinoquia = frecuencia_region.get(\"Orinoquia\")\n",
    "frecuencia_r_pacifica = frecuencia_region.get(\"Pacifica\")\n",
    "\n",
    "frecuencia_por_region = [frecuencia_r_amazonia,frecuencia_r_andina,frecuencia_r_caribe,frecuencia_r_orinoquia,frecuencia_r_pacifica]\n",
    "\n",
    "etiquetas = ['Amazonía: '+str(frecuencia_r_amazonia),'Andina: '+str(frecuencia_r_andina),'Caribe: '+str(frecuencia_r_caribe),'Orinoquía: '+str(frecuencia_r_orinoquia),'Pacífica: '+str(frecuencia_r_pacifica)]\n",
    "\n",
    "plt.pie(frecuencia_por_region,labels= etiquetas,\n",
    "        colors = [\"SkyBlue\",\"wheat\",\"green\",\"crimson\",\"purple\"],\n",
    "        autopct='%1.1f%%',\n",
    "        shadow = True,\n",
    "        startangle = 90,\n",
    "        radius = 2)\n",
    "\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "\n",
    "plt.bar(range(5), frecuencia_por_region, color = [\"SkyBlue\",\"wheat\",\"green\",\"crimson\",\"purple\"])\n",
    "plt.xticks(range(5), etiquetas, rotation=60)\n",
    "plt.title(\"Frecuencia por región\")\n",
    "plt.ylim(min(frecuencia_por_region)-10, max(frecuencia_por_region)+10)\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ZCCKT547lRNB"
   },
   "source": [
    "## 2. Abordaje de la pregunta de negocio\n",
    "\n",
    "El comité encargado de diseñar el programa de becas ha tenido dificultades para llegar a acuerdos. Algunos piensan que el criterio principal de selección debería ser respecto a lo económico y académico, sin importar otras características personales, mientras que otros piensan que considerar estas características es, de hecho, parte del espíritu del programa.\n",
    "\n",
    "* El primer grupo sugiere que se deben tomar en orden ascendente los estratos y elegir, en cada uno de ellos, al 2% de personas con promedio académico superior en esa sub-población, hasta que se agoten las becas disponibles. En caso de quedar becas disponibles al final del proceso, se repite el mismo esquema, considerando que ya no se tienen en cuenta las personas que hayan sido elegidas en rondas anteriores.\n",
    "\n",
    "* El segundo grupo sugiere que los recibidores de becas deben estar igualmente distribuidos entre las diferentes regiones y generos, considerando, por supuesto, que para cada una de esas sub-poblaciones, las personas elegidas sean las de mejores promedios académicos.\n",
    "\n",
    "Dado que las diferencias entre estos grupos obedecen a su entendimiento particular del problema, el presidente del comité propone utilizar los datos disponibles de las encuestas, sugiriendo que se analice qué características tendría la población de elegidos bajo cada uno de los dos criterios expuestos."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Jn8Wzg8vlRNF"
   },
   "source": [
    "**Misión 3**\n",
    "\n",
    "Defina la pregunta de negocio y la pregunta de *analytics* para esta situación."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "BB3mAQYLlRNH"
   },
   "outputs": [],
   "source": [
    "# respuesta en texto (solo leeremos los primeros 300 caracteres de la respuesta)\n",
    "\n",
    "pregunta_negocio = 'El comité encargado del programa de becas desea conocer las características de las poblaciones becadas, como resultado de aplicar los métodos de asignación de becas propuestos por el primer y segundo grupo. Lo anterior con el propósito de determinar el método de asignación de becas adecuado.'\n",
    "\n",
    "pregunta_analytics = 'Construir un modelo que permita simular la asignación de becas, teniendo en cuenta los dos métodos propuestos y analizar las carcterísticas de las poblaciones becadas, utilizando información descriptiva y gráficos para comparar los resultados de los métodos.' \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cOFSvyP_lRNI"
   },
   "source": [
    "**Misión 4**\n",
    "\n",
    "Desarrollar un algoritmo que permita conocer la población que sería becada según los criterios propuestos por el *primer grupo* mencionado arriba."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "WsAcnCzIlRNJ",
    "outputId": "d5a2fb5a-6131-4536-8e39-ef2dbc3b7c9c"
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el número de becas a entregar:  500\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "No. becas entregadas: 500\n",
      "No. becas disponibles: 0\n",
      "\n",
      "No. becas entregadas - estrato 1: 111\n",
      "No. becas entregadas - estrato 2: 185\n",
      "No. becas entregadas - estrato 3: 156\n",
      "No. becas entregadas - estrato 4: 35\n",
      "No. becas entregadas - estrato 5: 13\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "\n",
    "#El primer grupo sugiere que se deben tomar en orden ascendente los estratos y elegir, en cada uno de ellos,\n",
    "#al 2% de personas con promedio académico superior en esa sub-población, hasta que se agoten las becas disponibles.\n",
    "#En caso de quedar becas disponibles al final del proceso, se repite el mismo esquema, considerando que ya no se\n",
    "#tienen en cuenta las personas que hayan sido elegidas en rondas anteriores.\n",
    "\n",
    "import math\n",
    "\n",
    "#matriz_datos\n",
    "\n",
    "#Nombre fila de matriz:\n",
    "#matriz_datos[0,:] = ID\n",
    "#matriz_datos[1,:] = edad\n",
    "#matriz_datos[2,:] = género\n",
    "#matriz_datos[3,:] = estado civil\n",
    "#matriz_datos[4,:] = escolaridad\n",
    "#matriz_datos[5,:] = estrato\n",
    "#matriz_datos[6,:] = región\n",
    "#matriz_datos[7,:] = promedio\n",
    "#matriz_datos[8,:] = Beca\n",
    "\n",
    "no_columnas = np.shape(matriz_datos)\n",
    "no_personas = no_columnas[1] - 1\n",
    "\n",
    "matriz_datos_estrato1 = np.ones((9,1))\n",
    "matriz_datos_estrato2 = np.ones((9,1))\n",
    "matriz_datos_estrato3 = np.ones((9,1))\n",
    "matriz_datos_estrato4 = np.ones((9,1))\n",
    "matriz_datos_estrato5 = np.ones((9,1))\n",
    "\n",
    "for column in matriz_datos.T:\n",
    "  if column[5] == '1':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato1 = np.append(matriz_datos_estrato1, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '2':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato2 = np.append(matriz_datos_estrato2, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '3':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato3 = np.append(matriz_datos_estrato3, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '4':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato4 = np.append(matriz_datos_estrato4, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '5':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato5 = np.append(matriz_datos_estrato5, column, axis = 1)\n",
    "\n",
    "matriz_datos_estrato1 = np.delete(matriz_datos_estrato1, 0, axis=1)\n",
    "matriz_datos_estrato1 = np.concatenate((matriz_nombres,matriz_datos_estrato1), axis=1)\n",
    "matriz_datos_estrato1 = matriz_datos_estrato1[:, matriz_datos_estrato1[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato2 = np.delete(matriz_datos_estrato2, 0, axis=1)\n",
    "matriz_datos_estrato2 = np.concatenate((matriz_nombres,matriz_datos_estrato2), axis=1)\n",
    "matriz_datos_estrato2 = matriz_datos_estrato2[:, matriz_datos_estrato2[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato3 = np.delete(matriz_datos_estrato3, 0, axis=1)\n",
    "matriz_datos_estrato3 = np.concatenate((matriz_nombres,matriz_datos_estrato3), axis=1)\n",
    "matriz_datos_estrato3 = matriz_datos_estrato3[:, matriz_datos_estrato3[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato4 = np.delete(matriz_datos_estrato4, 0, axis=1)\n",
    "matriz_datos_estrato4 = np.concatenate((matriz_nombres,matriz_datos_estrato4), axis=1)\n",
    "matriz_datos_estrato4 = matriz_datos_estrato4[:, matriz_datos_estrato4[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato5 = np.delete(matriz_datos_estrato5, 0, axis=1)\n",
    "matriz_datos_estrato5 = np.concatenate((matriz_nombres,matriz_datos_estrato5), axis=1)\n",
    "matriz_datos_estrato5 = matriz_datos_estrato5[:, matriz_datos_estrato5[7].argsort()[::-1]]\n",
    "\n",
    "no_becas_a_entregar = int(input(\"Por favor ingrese el número de becas a entregar: \"))\n",
    "no_becas_entregadas = 0\n",
    "no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "entrega_becas_completa = False\n",
    "\n",
    "while entrega_becas_completa == False:\n",
    "  #Estrato 1:\n",
    "  Beca, frecuencia = np.unique(matriz_datos_estrato1[8,1:], return_counts=True)\n",
    "  frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "  frecuencia_NO_Beca = frecuencia_Becas.get(\"NO\")\n",
    "  if (frecuencia_NO_Beca != None):\n",
    "    porcentaje_pob_e1 = math.ceil(frecuencia_NO_Beca*0.02)\n",
    "    becas_entregadas_por_iteracion = 0\n",
    "    becas_entregadas_por_porcentaje = False\n",
    "    for column in matriz_datos_estrato1.T:\n",
    "      if (no_becas_disponibles > 0) and (no_becas_disponibles >= porcentaje_pob_e1) and (column[8] == 'NO') and (becas_entregadas_por_iteracion < porcentaje_pob_e1):\n",
    "        column[8] = 'SI'\n",
    "        \n",
    "        becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "        no_becas_entregadas = no_becas_entregadas + 1\n",
    "        no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "        becas_entregadas_por_porcentaje = True\n",
    "\n",
    "        if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "          entrega_becas_completa = True\n",
    "\n",
    "      elif (no_becas_disponibles>0) and (no_becas_disponibles < porcentaje_pob_e1) and (column[8] == 'NO') and (becas_entregadas_por_porcentaje == False):\n",
    "          column[8] = 'SI'\n",
    "          becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "          no_becas_entregadas = no_becas_entregadas + 1\n",
    "          no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "          if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "            entrega_becas_completa = True\n",
    "\n",
    "  #Estrato 2:\n",
    "  Beca, frecuencia = np.unique(matriz_datos_estrato2[8,1:], return_counts=True)\n",
    "  frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "  frecuencia_NO_Beca = frecuencia_Becas.get(\"NO\")\n",
    "  if (frecuencia_NO_Beca != None):\n",
    "    porcentaje_pob_e2 = math.ceil(frecuencia_NO_Beca*0.02)\n",
    "    becas_entregadas_por_iteracion = 0\n",
    "    becas_entregadas_por_porcentaje = False\n",
    "    for column in matriz_datos_estrato2.T:\n",
    "      if (no_becas_disponibles > 0) and (no_becas_disponibles >= porcentaje_pob_e2) and (column[8] == 'NO') and (becas_entregadas_por_iteracion < porcentaje_pob_e2):\n",
    "        column[8] = 'SI'\n",
    "        becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "        no_becas_entregadas = no_becas_entregadas + 1\n",
    "        no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "        becas_entregadas_por_porcentaje = True\n",
    "\n",
    "        if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "          entrega_becas_completa = True\n",
    "\n",
    "      elif (no_becas_disponibles>0) and (no_becas_disponibles < porcentaje_pob_e2) and (column[8] == 'NO') and (becas_entregadas_por_porcentaje == False):\n",
    "          column[8] = 'SI'\n",
    "          becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "          no_becas_entregadas = no_becas_entregadas + 1\n",
    "          no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "          if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "            entrega_becas_completa = True\n",
    "\n",
    "  #Estrato 3:\n",
    "  Beca, frecuencia = np.unique(matriz_datos_estrato3[8,1:], return_counts=True)\n",
    "  frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "  frecuencia_NO_Beca = frecuencia_Becas.get(\"NO\")\n",
    "  if (frecuencia_NO_Beca != None):\n",
    "    porcentaje_pob_e3 = math.ceil(frecuencia_NO_Beca*0.02)\n",
    "    becas_entregadas_por_iteracion = 0\n",
    "    becas_entregadas_por_porcentaje = False\n",
    "    for column in matriz_datos_estrato3.T:\n",
    "      if (no_becas_disponibles > 0) and (no_becas_disponibles >= porcentaje_pob_e3) and (column[8] == 'NO') and (becas_entregadas_por_iteracion < porcentaje_pob_e3):\n",
    "        column[8] = 'SI'\n",
    "        becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "        no_becas_entregadas = no_becas_entregadas + 1\n",
    "        no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "        becas_entregadas_por_porcentaje = True\n",
    "\n",
    "        if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "          entrega_becas_completa = True\n",
    "\n",
    "      elif (no_becas_disponibles>0) and (no_becas_disponibles < porcentaje_pob_e3) and (column[8] == 'NO') and (becas_entregadas_por_porcentaje == False):\n",
    "          column[8] = 'SI'\n",
    "          becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "          no_becas_entregadas = no_becas_entregadas + 1\n",
    "          no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "          #if (no_becas_disponibles == 0):\n",
    "          if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "            entrega_becas_completa = True\n",
    "\n",
    "  #Estrato 4:\n",
    "  Beca, frecuencia = np.unique(matriz_datos_estrato4[8,1:], return_counts=True)\n",
    "  frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "  frecuencia_NO_Beca = frecuencia_Becas.get(\"NO\")\n",
    "  if (frecuencia_NO_Beca != None):\n",
    "    porcentaje_pob_e4 = math.ceil(frecuencia_NO_Beca*0.02)\n",
    "    becas_entregadas_por_iteracion = 0\n",
    "    becas_entregadas_por_porcentaje = False\n",
    "    for column in matriz_datos_estrato4.T:\n",
    "      if (no_becas_disponibles > 0) and (no_becas_disponibles >= porcentaje_pob_e4) and (column[8] == 'NO') and (becas_entregadas_por_iteracion < porcentaje_pob_e4):\n",
    "        column[8] = 'SI'\n",
    "        becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "        no_becas_entregadas = no_becas_entregadas + 1\n",
    "        no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "        becas_entregadas_por_porcentaje = True\n",
    "\n",
    "        #if (no_becas_disponibles == 0):\n",
    "        if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "          entrega_becas_completa = True\n",
    "\n",
    "      elif (no_becas_disponibles>0) and (no_becas_disponibles < porcentaje_pob_e4) and (column[8] == 'NO') and (becas_entregadas_por_porcentaje == False):\n",
    "          column[8] = 'SI'\n",
    "          becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "          no_becas_entregadas = no_becas_entregadas + 1\n",
    "          no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "          #if (no_becas_disponibles == 0):\n",
    "          if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "            entrega_becas_completa = True\n",
    "\n",
    "  #145 becas\n",
    "  #Estrato 5:\n",
    "  Beca, frecuencia = np.unique(matriz_datos_estrato5[8,1:], return_counts=True)\n",
    "  frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "  frecuencia_NO_Beca = frecuencia_Becas.get(\"NO\")\n",
    "  if (frecuencia_NO_Beca != None):\n",
    "    porcentaje_pob_e5 = math.ceil(frecuencia_NO_Beca*0.02)\n",
    "    becas_entregadas_por_iteracion = 0\n",
    "    becas_entregadas_por_porcentaje = False\n",
    "    for column in matriz_datos_estrato5.T:\n",
    "      if (no_becas_disponibles > 0) and (no_becas_disponibles >= porcentaje_pob_e5) and (column[8] == 'NO') and (becas_entregadas_por_iteracion < porcentaje_pob_e5):\n",
    "        column[8] = 'SI'\n",
    "        becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "        no_becas_entregadas = no_becas_entregadas + 1\n",
    "        no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "        becas_entregadas_por_porcentaje = True\n",
    "\n",
    "        #if (no_becas_disponibles == 0):\n",
    "        if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "          entrega_becas_completa = True\n",
    "\n",
    "      elif (no_becas_disponibles>0) and (no_becas_disponibles < porcentaje_pob_e5) and (column[8] == 'NO') and (becas_entregadas_por_porcentaje == False):\n",
    "          column[8] = 'SI'\n",
    "          becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "          no_becas_entregadas = no_becas_entregadas + 1\n",
    "          no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "          #if (no_becas_disponibles == 0):\n",
    "          if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "            entrega_becas_completa = True\n",
    "\n",
    "matriz_datos_estrato2 = np.delete(matriz_datos_estrato2, 0, axis=1)\n",
    "matriz_datos_final_programa1 = np.concatenate((matriz_datos_estrato1,matriz_datos_estrato2), axis=1)\n",
    "matriz_datos_estrato3 = np.delete(matriz_datos_estrato3, 0, axis=1)\n",
    "matriz_datos_final_programa1 = np.concatenate((matriz_datos_final_programa1,matriz_datos_estrato3), axis=1)\n",
    "matriz_datos_estrato4 = np.delete(matriz_datos_estrato4, 0, axis=1)\n",
    "matriz_datos_final_programa1 = np.concatenate((matriz_datos_final_programa1,matriz_datos_estrato4), axis=1)\n",
    "matriz_datos_estrato5 = np.delete(matriz_datos_estrato5, 0, axis=1)\n",
    "matriz_datos_final_programa1 = np.concatenate((matriz_datos_final_programa1,matriz_datos_estrato5), axis=1)\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_estrato1[8,1:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "frecuencia_NO_Beca_e1 = frecuencia_Becas.get(\"SI\")\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_estrato2[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "frecuencia_NO_Beca_e2 = frecuencia_Becas.get('SI')\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_estrato3[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "frecuencia_NO_Beca_e3 = frecuencia_Becas.get(\"SI\")\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_estrato4[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "frecuencia_NO_Beca_e4 = frecuencia_Becas.get(\"SI\")\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_estrato5[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "frecuencia_NO_Beca_e5 = frecuencia_Becas.get(\"SI\")\n",
    "\n",
    "print(\"\")\n",
    "print(\"No. becas entregadas: \"+str(no_becas_entregadas))\n",
    "print(\"No. becas disponibles: \"+str(no_becas_disponibles))\n",
    "print(\"\")\n",
    "print(\"No. becas entregadas - estrato 1: \"+str(frecuencia_NO_Beca_e1))\n",
    "print(\"No. becas entregadas - estrato 2: \"+str(frecuencia_NO_Beca_e2))\n",
    "print(\"No. becas entregadas - estrato 3: \"+str(frecuencia_NO_Beca_e3))\n",
    "print(\"No. becas entregadas - estrato 4: \"+str(frecuencia_NO_Beca_e4))\n",
    "print(\"No. becas entregadas - estrato 5: \"+str(frecuencia_NO_Beca_e5))\n",
    "print(\"\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SeZ98ffVlRNK"
   },
   "source": [
    "**Misión 5**\n",
    "\n",
    "Desarrollar un algoritmo que permita conocer la población que sería becada según los criterios propuestos por el *segundo grupo* mencionado arriba."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ERMl-7dflRNL",
    "outputId": "b836ac6b-75f8-48a9-a459-5e65658f1143",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el número de becas a entregar:  100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tamaño matriz datos programa 2: (9, 501)\n",
      "No. total becas entregadas: 100\n",
      "\n",
      "No. becas entregadas región amazonía - género femenino: 5\n",
      "No. becas entregadas región amazonía - género masculino: 6\n",
      "No. becas entregadas región amazonía - género no binario: 2\n",
      "No. becas entregadas región amazonía - género otro: 2\n",
      "No. becas entregadas región andina - género femenino: 8\n",
      "No. becas entregadas región andina - género masculino: 8\n",
      "No. becas entregadas región andina - género no binario: 8\n",
      "No. becas entregadas región andina - género otro: 1\n",
      "No. becas entregadas región caribe - género femenino: 8\n",
      "No. becas entregadas región caribe - género masculino: 7\n",
      "No. becas entregadas región caribe - género no binario: 7\n",
      "No. becas entregadas región caribe - género otro: 2\n",
      "No. becas entregadas región orinoquia - género femenino: 7\n",
      "No. becas entregadas región orinoquia - género masculino: 7\n",
      "No. becas entregadas región orinoquia - género no binario: None\n",
      "No. becas entregadas región orinoquia - género otro: 1\n",
      "No. becas entregadas región pacifica - género femenino: 7\n",
      "No. becas entregadas región pacifica - género masculino: 7\n",
      "No. becas entregadas región pacifica - género no binario: 7\n",
      "No. becas entregadas región pacifica - género otro: None\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "\n",
    "#El segundo grupo sugiere que los recibidores de becas deben estar igualmente distribuidos entre las diferentes regiones y generos,\n",
    "#considerando, por supuesto, que para cada una de esas sub-poblaciones, las personas elegidas sean las de mejores promedios académicos.\n",
    "\n",
    "#Nombre fila de matriz:\n",
    "#matriz_datos[0,:] = ID\n",
    "#matriz_datos[1,:] = edad\n",
    "#matriz_datos[2,:] = género\n",
    "#matriz_datos[3,:] = estado civil\n",
    "#matriz_datos[4,:] = escolaridad\n",
    "#matriz_datos[5,:] = estrato\n",
    "#matriz_datos[6,:] = región\n",
    "#matriz_datos[7,:] = promedio\n",
    "#matriz_datos[8,:] = Beca\n",
    "\n",
    "matriz_datos3 = matriz_datos\n",
    "\n",
    "no_columnas = np.shape(matriz_datos)\n",
    "no_personas = no_columnas[1] - 1\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "matriz_datos_region_amazonia_femenino = np.ones((9,1))\n",
    "matriz_datos_region_amazonia_masculino = np.ones((9,1))\n",
    "matriz_datos_region_amazonia_no_binario = np.ones((9,1))\n",
    "matriz_datos_region_amazonia_otro = np.ones((9,1))\n",
    "\n",
    "matriz_datos_region_andina_femenino = np.ones((9,1))\n",
    "matriz_datos_region_andina_masculino = np.ones((9,1))\n",
    "matriz_datos_region_andina_no_binario = np.ones((9,1))\n",
    "matriz_datos_region_andina_otro = np.ones((9,1))\n",
    "\n",
    "matriz_datos_region_caribe_femenino = np.ones((9,1))\n",
    "matriz_datos_region_caribe_masculino = np.ones((9,1))\n",
    "matriz_datos_region_caribe_no_binario = np.ones((9,1))\n",
    "matriz_datos_region_caribe_otro = np.ones((9,1))\n",
    "\n",
    "matriz_datos_region_orinoquia_femenino = np.ones((9,1))\n",
    "matriz_datos_region_orinoquia_masculino = np.ones((9,1))\n",
    "matriz_datos_region_orinoquia_no_binario = np.ones((9,1))\n",
    "matriz_datos_region_orinoquia_otro = np.ones((9,1))\n",
    "\n",
    "matriz_datos_region_pacifica_femenino = np.ones((9,1))\n",
    "matriz_datos_region_pacifica_masculino = np.ones((9,1))\n",
    "matriz_datos_region_pacifica_no_binario = np.ones((9,1))\n",
    "matriz_datos_region_pacifica_otro = np.ones((9,1))\n",
    "\n",
    "for column in matriz_datos.T:\n",
    "  if (column[6] == 'Amazonia') and (column[2] == 'femenino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_amazonia_femenino = np.append(matriz_datos_region_amazonia_femenino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Amazonia') and (column[2] == 'masculino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_amazonia_masculino = np.append(matriz_datos_region_amazonia_masculino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Amazonia') and (column[2] == 'no binario'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_amazonia_no_binario = np.append(matriz_datos_region_amazonia_no_binario, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Amazonia') and (column[2] == 'otro'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_amazonia_otro = np.append(matriz_datos_region_amazonia_otro, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Andina') and (column[2] == 'femenino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_andina_femenino = np.append(matriz_datos_region_andina_femenino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Andina') and (column[2] == 'masculino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_andina_masculino = np.append(matriz_datos_region_andina_masculino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Andina') and (column[2] == 'no binario'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_andina_no_binario = np.append(matriz_datos_region_andina_no_binario, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Andina') and (column[2] == 'otro'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_andina_otro = np.append(matriz_datos_region_andina_otro, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Caribe') and (column[2] == 'femenino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_caribe_femenino = np.append(matriz_datos_region_caribe_femenino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Caribe') and (column[2] == 'masculino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_caribe_masculino = np.append(matriz_datos_region_caribe_masculino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Caribe') and (column[2] == 'no binario'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_caribe_no_binario = np.append(matriz_datos_region_caribe_no_binario, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Caribe') and (column[2] == 'otro'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_caribe_otro = np.append(matriz_datos_region_caribe_otro, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Orinoquia') and (column[2] == 'femenino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_orinoquia_femenino = np.append(matriz_datos_region_orinoquia_femenino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Orinoquia') and (column[2] == 'masculino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_orinoquia_masculino = np.append(matriz_datos_region_orinoquia_masculino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Orinoquia') and (column[2] == 'no binario'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_orinoquia_no_binario = np.append(matriz_datos_region_orinoquia_no_binario, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Orinoquia') and (column[2] == 'otro'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_orinoquia_otro = np.append(matriz_datos_region_orinoquia_otro, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Pacifica') and (column[2] == 'femenino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_pacifica_femenino = np.append(matriz_datos_region_pacifica_femenino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Pacifica') and (column[2] == 'masculino'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_pacifica_masculino = np.append(matriz_datos_region_pacifica_masculino, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Pacifica') and (column[2] == 'no binario'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_pacifica_no_binario = np.append(matriz_datos_region_pacifica_no_binario, column, axis = 1)\n",
    "\n",
    "  elif (column[6] == 'Pacifica') and (column[2] == 'otro'):\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_region_pacifica_otro = np.append(matriz_datos_region_pacifica_otro, column, axis = 1)\n",
    "\n",
    "\n",
    "#Región amazonia\n",
    "matriz_datos_region_amazonia_femenino = np.delete(matriz_datos_region_amazonia_femenino, 0, axis=1)\n",
    "matriz_datos_region_amazonia_femenino = matriz_datos_region_amazonia_femenino[:, matriz_datos_region_amazonia_femenino[7].argsort()[::-1]]\n",
    "matriz_datos_region_amazonia_femenino = np.concatenate((matriz_nombres,matriz_datos_region_amazonia_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_amazonia_masculino = np.delete(matriz_datos_region_amazonia_masculino, 0, axis=1)\n",
    "matriz_datos_region_amazonia_masculino = matriz_datos_region_amazonia_masculino[:, matriz_datos_region_amazonia_masculino[7].argsort()[::-1]]\n",
    "matriz_datos_region_amazonia_masculino = np.concatenate((matriz_nombres,matriz_datos_region_amazonia_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_amazonia_no_binario = np.delete(matriz_datos_region_amazonia_no_binario, 0, axis=1)\n",
    "matriz_datos_region_amazonia_no_binario = matriz_datos_region_amazonia_no_binario[:, matriz_datos_region_amazonia_no_binario[7].argsort()[::-1]]\n",
    "matriz_datos_region_amazonia_no_binario = np.concatenate((matriz_nombres,matriz_datos_region_amazonia_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_amazonia_otro = np.delete(matriz_datos_region_amazonia_otro, 0, axis=1)\n",
    "matriz_datos_region_amazonia_otro = matriz_datos_region_amazonia_otro[:, matriz_datos_region_amazonia_otro[7].argsort()[::-1]]\n",
    "matriz_datos_region_amazonia_otro = np.concatenate((matriz_nombres,matriz_datos_region_amazonia_otro), axis=1)\n",
    "\n",
    "#Región andina\n",
    "matriz_datos_region_andina_femenino = np.delete(matriz_datos_region_andina_femenino, 0, axis=1)\n",
    "matriz_datos_region_andina_femenino = matriz_datos_region_andina_femenino[:, matriz_datos_region_andina_femenino[7].argsort()[::-1]]\n",
    "matriz_datos_region_andina_femenino = np.concatenate((matriz_nombres,matriz_datos_region_andina_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_masculino = np.delete(matriz_datos_region_andina_masculino, 0, axis=1)\n",
    "matriz_datos_region_andina_masculino = matriz_datos_region_andina_masculino[:, matriz_datos_region_andina_masculino[7].argsort()[::-1]]\n",
    "matriz_datos_region_andina_masculino = np.concatenate((matriz_nombres,matriz_datos_region_andina_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_no_binario = np.delete(matriz_datos_region_andina_no_binario, 0, axis=1)\n",
    "matriz_datos_region_andina_no_binario = matriz_datos_region_andina_no_binario[:, matriz_datos_region_andina_no_binario[7].argsort()[::-1]]\n",
    "matriz_datos_region_andina_no_binario = np.concatenate((matriz_nombres,matriz_datos_region_andina_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_otro = np.delete(matriz_datos_region_andina_otro, 0, axis=1)\n",
    "matriz_datos_region_andina_otro = matriz_datos_region_andina_otro[:, matriz_datos_region_andina_otro[7].argsort()[::-1]]\n",
    "matriz_datos_region_andina_otro = np.concatenate((matriz_nombres,matriz_datos_region_andina_otro), axis=1)\n",
    "\n",
    "#Región caribe\n",
    "matriz_datos_region_caribe_femenino = np.delete(matriz_datos_region_caribe_femenino, 0, axis=1)\n",
    "matriz_datos_region_caribe_femenino = matriz_datos_region_caribe_femenino[:, matriz_datos_region_caribe_femenino[7].argsort()[::-1]]\n",
    "matriz_datos_region_caribe_femenino = np.concatenate((matriz_nombres,matriz_datos_region_caribe_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_masculino = np.delete(matriz_datos_region_caribe_masculino, 0, axis=1)\n",
    "matriz_datos_region_caribe_masculino = matriz_datos_region_caribe_masculino[:, matriz_datos_region_caribe_masculino[7].argsort()[::-1]]\n",
    "matriz_datos_region_caribe_masculino = np.concatenate((matriz_nombres,matriz_datos_region_caribe_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_no_binario = np.delete(matriz_datos_region_caribe_no_binario, 0, axis=1)\n",
    "matriz_datos_region_caribe_no_binario = matriz_datos_region_caribe_no_binario[:, matriz_datos_region_caribe_no_binario[7].argsort()[::-1]]\n",
    "matriz_datos_region_caribe_no_binario = np.concatenate((matriz_nombres,matriz_datos_region_caribe_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_otro = np.delete(matriz_datos_region_caribe_otro, 0, axis=1)\n",
    "matriz_datos_region_caribe_otro = matriz_datos_region_caribe_otro[:, matriz_datos_region_caribe_otro[7].argsort()[::-1]]\n",
    "matriz_datos_region_caribe_otro = np.concatenate((matriz_nombres,matriz_datos_region_caribe_otro), axis=1)\n",
    "\n",
    "#Región orionoquia\n",
    "matriz_datos_region_orinoquia_femenino = np.delete(matriz_datos_region_orinoquia_femenino, 0, axis=1)\n",
    "matriz_datos_region_orinoquia_femenino = matriz_datos_region_orinoquia_femenino[:, matriz_datos_region_orinoquia_femenino[7].argsort()[::-1]]\n",
    "matriz_datos_region_orinoquia_femenino = np.concatenate((matriz_nombres,matriz_datos_region_orinoquia_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_masculino = np.delete(matriz_datos_region_orinoquia_masculino, 0, axis=1)\n",
    "matriz_datos_region_orinoquia_masculino = matriz_datos_region_orinoquia_masculino[:, matriz_datos_region_orinoquia_masculino[7].argsort()[::-1]]\n",
    "matriz_datos_region_orinoquia_masculino = np.concatenate((matriz_nombres,matriz_datos_region_orinoquia_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_no_binario = np.delete(matriz_datos_region_orinoquia_no_binario, 0, axis=1)\n",
    "matriz_datos_region_orinoquia_no_binario = matriz_datos_region_orinoquia_no_binario[:, matriz_datos_region_orinoquia_no_binario[7].argsort()[::-1]]\n",
    "matriz_datos_region_orinoquia_no_binario = np.concatenate((matriz_nombres,matriz_datos_region_orinoquia_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_otro = np.delete(matriz_datos_region_orinoquia_otro, 0, axis=1)\n",
    "matriz_datos_region_orinoquia_otro = matriz_datos_region_orinoquia_otro[:, matriz_datos_region_orinoquia_otro[7].argsort()[::-1]]\n",
    "matriz_datos_region_orinoquia_otro = np.concatenate((matriz_nombres,matriz_datos_region_orinoquia_otro), axis=1)\n",
    "\n",
    "#Región pacifica\n",
    "matriz_datos_region_pacifica_femenino = np.delete(matriz_datos_region_pacifica_femenino, 0, axis=1)\n",
    "matriz_datos_region_pacifica_femenino = matriz_datos_region_pacifica_femenino[:, matriz_datos_region_pacifica_femenino[7].argsort()[::-1]]\n",
    "matriz_datos_region_pacifica_femenino = np.concatenate((matriz_nombres,matriz_datos_region_pacifica_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_masculino = np.delete(matriz_datos_region_pacifica_masculino, 0, axis=1)\n",
    "matriz_datos_region_pacifica_masculino = matriz_datos_region_pacifica_masculino[:, matriz_datos_region_pacifica_masculino[7].argsort()[::-1]]\n",
    "matriz_datos_region_pacifica_masculino = np.concatenate((matriz_nombres,matriz_datos_region_pacifica_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_no_binario = np.delete(matriz_datos_region_pacifica_no_binario, 0, axis=1)\n",
    "matriz_datos_region_pacifica_no_binario = matriz_datos_region_pacifica_no_binario[:, matriz_datos_region_pacifica_no_binario[7].argsort()[::-1]]\n",
    "matriz_datos_region_pacifica_no_binario = np.concatenate((matriz_nombres,matriz_datos_region_pacifica_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_otro = np.delete(matriz_datos_region_pacifica_otro, 0, axis=1)\n",
    "matriz_datos_region_pacifica_otro = matriz_datos_region_pacifica_otro[:, matriz_datos_region_pacifica_otro[7].argsort()[::-1]]\n",
    "matriz_datos_region_pacifica_otro = np.concatenate((matriz_nombres,matriz_datos_region_pacifica_otro), axis=1)\n",
    "\n",
    "no_becas_a_entregar = int(input(\"Por favor ingrese el número de becas a entregar: \"))\n",
    "no_becas_entregadas = 0\n",
    "no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "entrega_becas_completa = False\n",
    "\n",
    "while entrega_becas_completa == False:\n",
    "  #Region amazonía - género femenino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_amazonia_femenino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region amazonía - género masculino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_amazonia_masculino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region amazonía - género no binario:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_amazonia_no_binario.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region amazonía - género otro:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_amazonia_otro.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region andina - género femenino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_andina_femenino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region andina - género masculino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_andina_masculino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region andina - género no binario:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_andina_no_binario.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region andina - género otro:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_andina_otro.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region caribe - género femenino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_caribe_femenino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region caribe - género masculino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_caribe_masculino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region caribe - género no binario:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_caribe_no_binario.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region caribe - género otro:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_caribe_otro.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region orinoquia - género femenino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_orinoquia_femenino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region orinoquia - género masculino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_orinoquia_masculino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region orinoquia - género no binario:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_orinoquia_no_binario.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region orinoquia - género otro:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_orinoquia_otro.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region pacifica - género femenino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_pacifica_femenino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region pacifica - género masculino:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_pacifica_masculino.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region pacifica - género no binario:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_pacifica_no_binario.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "  #Region pacifica - género otro:\n",
    "  becas_entregadas_por_iteracion = 0\n",
    "  for column in matriz_datos_region_pacifica_otro.T:\n",
    "    if (no_becas_disponibles > 0) and (column[8] == 'NO') and (becas_entregadas_por_iteracion <1):\n",
    "      column[8] = 'SI'\n",
    "      becas_entregadas_por_iteracion = becas_entregadas_por_iteracion + 1\n",
    "      no_becas_entregadas = no_becas_entregadas + 1\n",
    "      no_becas_disponibles = no_becas_a_entregar - no_becas_entregadas\n",
    "\n",
    "      if (no_becas_disponibles == 0) or (no_becas_entregadas == no_personas):\n",
    "        entrega_becas_completa = True\n",
    "    else:\n",
    "      pass\n",
    "\n",
    "matriz_datos_region_amazonia_masculino = np.delete(matriz_datos_region_amazonia_masculino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_region_amazonia_femenino,matriz_datos_region_amazonia_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_amazonia_no_binario = np.delete(matriz_datos_region_amazonia_no_binario, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_amazonia_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_amazonia_otro = np.delete(matriz_datos_region_amazonia_otro, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_amazonia_otro), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_femenino = np.delete(matriz_datos_region_andina_femenino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_andina_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_masculino = np.delete(matriz_datos_region_andina_masculino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_andina_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_no_binario = np.delete(matriz_datos_region_andina_no_binario, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_andina_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_andina_otro = np.delete(matriz_datos_region_andina_otro, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_andina_otro), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_femenino = np.delete(matriz_datos_region_caribe_femenino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_caribe_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_masculino = np.delete(matriz_datos_region_caribe_masculino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_caribe_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_no_binario = np.delete(matriz_datos_region_caribe_no_binario, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_caribe_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_caribe_otro = np.delete(matriz_datos_region_caribe_otro, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_caribe_otro), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_femenino = np.delete(matriz_datos_region_orinoquia_femenino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_orinoquia_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_masculino = np.delete(matriz_datos_region_orinoquia_masculino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_orinoquia_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_no_binario = np.delete(matriz_datos_region_orinoquia_no_binario, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_orinoquia_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_orinoquia_otro = np.delete(matriz_datos_region_orinoquia_otro, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_orinoquia_otro), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_femenino = np.delete(matriz_datos_region_pacifica_femenino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_pacifica_femenino), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_masculino = np.delete(matriz_datos_region_pacifica_masculino, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_pacifica_masculino), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_no_binario = np.delete(matriz_datos_region_pacifica_no_binario, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_pacifica_no_binario), axis=1)\n",
    "\n",
    "matriz_datos_region_pacifica_otro = np.delete(matriz_datos_region_pacifica_otro, 0, axis=1)\n",
    "matriz_datos_final_programa2 = np.concatenate((matriz_datos_final_programa2,matriz_datos_region_pacifica_otro), axis=1)\n",
    "\n",
    "print(\"Tamaño matriz datos programa 2: \"+str(np.shape(matriz_datos_final_programa2)))\n",
    "\n",
    "print(\"No. total becas entregadas: \"+str(no_becas_entregadas))\n",
    "print(\"\")\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_amazonia_femenino[8,1:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_amazonia_femenino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región amazonía - género femenino: \"+str(becas_amazonia_femenino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_amazonia_masculino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_amazonia_masculino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región amazonía - género masculino: \"+str(becas_amazonia_masculino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_amazonia_no_binario[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_amazonia_no_binario = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región amazonía - género no binario: \"+str(becas_amazonia_no_binario))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_amazonia_otro[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_amazonia_otro = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región amazonía - género otro: \"+str(becas_amazonia_otro))\n",
    "\n",
    "#Región andina\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_andina_femenino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_andina_femenino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región andina - género femenino: \"+str(becas_andina_femenino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_andina_masculino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_andina_masculino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región andina - género masculino: \"+str(becas_andina_masculino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_andina_no_binario[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_andina_no_binario = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región andina - género no binario: \"+str(becas_andina_no_binario))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_andina_otro[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_andina_otro = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región andina - género otro: \"+str(becas_andina_otro))\n",
    "\n",
    "#Región caribe\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_caribe_femenino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_caribe_femenino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región caribe - género femenino: \"+str(becas_caribe_femenino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_caribe_masculino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_caribe_masculino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región caribe - género masculino: \"+str(becas_caribe_masculino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_caribe_no_binario[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_caribe_no_binario = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región caribe - género no binario: \"+str(becas_caribe_no_binario))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_caribe_otro[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_caribe_otro = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región caribe - género otro: \"+str(becas_caribe_otro))\n",
    "\n",
    "#Región orinoquia\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_orinoquia_femenino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_orinoquia_femenino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región orinoquia - género femenino: \"+str(becas_orinoquia_femenino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_orinoquia_masculino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_orinoquia_masculino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región orinoquia - género masculino: \"+str(becas_orinoquia_masculino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_orinoquia_no_binario[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_orinoquia_no_binario = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región orinoquia - género no binario: \"+str(becas_orinoquia_no_binario))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_orinoquia_otro[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_orinoquia_otro = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región orinoquia - género otro: \"+str(becas_orinoquia_otro))\n",
    "\n",
    "#Región pacifica\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_pacifica_femenino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_pacifica_femenino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región pacifica - género femenino: \"+str(becas_pacifica_femenino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_pacifica_masculino[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_pacifica_masculino = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región pacifica - género masculino: \"+str(becas_pacifica_masculino))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_pacifica_no_binario[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_pacifica_no_binario = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región pacifica - género no binario: \"+str(becas_pacifica_no_binario))\n",
    "\n",
    "Beca, frecuencia = np.unique(matriz_datos_region_pacifica_otro[8,:], return_counts=True)\n",
    "frecuencia_Becas = dict(zip(Beca, frecuencia))\n",
    "becas_pacifica_otro = frecuencia_Becas.get(\"SI\")\n",
    "print(\"No. becas entregadas región pacifica - género otro: \"+str(becas_pacifica_otro))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "C2A4nIlQlRNM"
   },
   "source": [
    "**Misión 6**\n",
    "\n",
    "Desarrollar un algoritmo, a partir de lo anterior, cuyo resultado permita al comité comparar fácilmente las características de las dos poblaciones hipotéticas que recibirían becas.\n",
    "\n",
    "*Ayuda*: considera utilizar tus implementaciones de la *Misión 2* para facilitar esta misión."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "GBKItGU4lRNO",
    "outputId": "70d04e8b-ef02-4ce5-ebde-f5b6895d3262"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Becas otorgadas por región programa 1   Amazonía: 4     Andina: 33    Caribe: 36     Orinoquia: 5     Pacífica: 22\n",
      "Becas otorgadas por región programa 2   Amazonía: 15    Andina: 25    Caribe: 24     Orinoquia: 15    Pacífica: 21\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Becas otorgadas por promedio programa 1   0 - 0.9: 0    1 - 1.99: 0    2 - 2.99: 6     3 - 3.9: 41    4 - 5: 53\n",
      "Becas otorgadas por promedio programa 2   0 - 0.9: 4    1 - 1.99: 4    2 - 2.99: 17    3 - 3.9: 24    4 - 5: 51\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Becas otorgadas por género programa 1   Femenino: 50    Maculino: 43    No Binario: 0     Otro: 1\n",
      "Becas otorgadas por género programa 2   Femenino: 35    Maculino: 35    No Binario: 24    Otro: 6\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "\n",
    "#matriz_datos_final_programa1\n",
    "#matriz_datos_final_programa2\n",
    "\n",
    "#Nombre fila de matriz:\n",
    "#matriz_datos[0,:] = ID\n",
    "#matriz_datos[1,:] = edad\n",
    "#matriz_datos[2,:] = género\n",
    "#matriz_datos[3,:] = estado civil\n",
    "#matriz_datos[4,:] = escolaridad\n",
    "#matriz_datos[5,:] = estrato\n",
    "#matriz_datos[6,:] = región\n",
    "#matriz_datos[7,:] = promedio\n",
    "#matriz_datos[8,:] = Beca\n",
    "\n",
    "becas_amazonia_p1 = np.where((matriz_datos_final_programa1[6,:] == 'Amazonia') & (matriz_datos_final_programa1[8,:] == 'SI'))\n",
    "becas_amazonia_p1 = (np.shape(becas_amazonia_p1))[1]\n",
    "\n",
    "becas_andina_p1 = np.where((matriz_datos_final_programa1[6,:] == 'Andina') & (matriz_datos_final_programa1[8,:] == 'SI'))\n",
    "becas_andina_p1 = (np.shape(becas_andina_p1))[1]\n",
    "\n",
    "becas_caribe_p1 = np.where((matriz_datos_final_programa1[6,:] == 'Caribe') & (matriz_datos_final_programa1[8,:] == 'SI'))\n",
    "becas_caribe_p1 = (np.shape(becas_caribe_p1))[1]\n",
    "\n",
    "becas_orinoquia_p1 = np.where((matriz_datos_final_programa1[6,:] == 'Orinoquia') & (matriz_datos_final_programa1[8,:] == 'SI'))\n",
    "becas_orinoquia_p1 = (np.shape(becas_orinoquia_p1))[1]\n",
    "\n",
    "becas_pacifica_p1 = np.where((matriz_datos_final_programa1[6,:] == 'Pacifica') & (matriz_datos_final_programa1[8,:] == 'SI'))\n",
    "becas_pacifica_p1 = (np.shape(becas_pacifica_p1))[1]\n",
    "\n",
    "frecuencia_por_programa1 = [becas_amazonia_p1,becas_andina_p1,becas_caribe_p1,becas_orinoquia_p1,becas_pacifica_p1]\n",
    "print(\"Becas otorgadas por región programa 1   Amazonía: \" + str (becas_amazonia_p1) + \"     Andina: \" + str (becas_andina_p1) + \"    Caribe: \" + str (becas_caribe_p1) + \"     Orinoquia: \" + str (becas_orinoquia_p1) + \"     Pacífica: \" + str (becas_pacifica_p1))\n",
    "\n",
    "\n",
    "#programa 2:\n",
    "becas_amazonia_p2 = np.where((matriz_datos_final_programa2[6,:] == 'Amazonia') & (matriz_datos_final_programa2[8,:] == 'SI'))\n",
    "becas_amazonia_p2 = (np.shape(becas_amazonia_p2))[1]\n",
    "\n",
    "becas_andina_p2 = np.where((matriz_datos_final_programa2[6,:] == 'Andina') & (matriz_datos_final_programa2[8,:] == 'SI'))\n",
    "becas_andina_p2 = (np.shape(becas_andina_p2))[1]\n",
    "\n",
    "becas_caribe_p2 = np.where((matriz_datos_final_programa2[6,:] == 'Caribe') & (matriz_datos_final_programa2[8,:] == 'SI'))\n",
    "becas_caribe_p2 = (np.shape(becas_caribe_p2))[1]\n",
    "\n",
    "becas_orinoquia_p2 = np.where((matriz_datos_final_programa2[6,:] == 'Orinoquia') & (matriz_datos_final_programa2[8,:] == 'SI'))\n",
    "becas_orinoquia_p2 = (np.shape(becas_orinoquia_p2))[1]\n",
    "\n",
    "becas_pacifica_p2 = np.where((matriz_datos_final_programa2[6,:] == 'Pacifica') & (matriz_datos_final_programa2[8,:] == 'SI'))\n",
    "becas_pacifica_p2 = (np.shape(becas_pacifica_p2))[1]\n",
    "\n",
    "frecuencia_por_programa2 = [becas_amazonia_p2,becas_andina_p2,becas_caribe_p2,becas_orinoquia_p2,becas_pacifica_p2]\n",
    "print(\"Becas otorgadas por región programa 2   Amazonía: \" + str (becas_amazonia_p2) + \"    Andina: \" + str (becas_andina_p2) + \"    Caribe: \" + str (becas_caribe_p2) + \"     Orinoquia: \" + str (becas_orinoquia_p2) + \"    Pacífica: \" + str (becas_pacifica_p2))\n",
    "\n",
    "#Gráfico regiones p1-p2\n",
    "print(\"\")\n",
    "etiquetas_regiones = ['Amazonía','Andina','Caribe','Orinoquia','Pacífico']\n",
    "#frecuencia_por_programa1\n",
    "#frecuencia_por_programa2\n",
    "numero_de_grupos = len(frecuencia_por_programa1)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras, frecuencia_por_programa1, width=ancho_barras, label=\"Becas programa 1\")\n",
    "plt.bar(indice_barras + ancho_barras, frecuencia_por_programa2, width=ancho_barras, label=\"Becas programa 2\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_regiones, rotation=60)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Regiones')\n",
    "plt.title('Becas otorgadas por regiones')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#PROMEDIOS:\n",
    "becas_0_1 = np.where((matriz_datos_final_programa1[7,1:].astype(float) >= 0) & (matriz_datos_final_programa1[7,1:].astype(float) < 1) & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_0_1 = (np.shape(becas_0_1))[1]\n",
    "\n",
    "becas_1_2 = np.where((matriz_datos_final_programa1[7,1:].astype(float) >= 1) & (matriz_datos_final_programa1[7,1:].astype(float) < 2) & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_1_2 = (np.shape(becas_1_2))[1]\n",
    "\n",
    "becas_2_3 = np.where((matriz_datos_final_programa1[7,1:].astype(float) >= 2) & (matriz_datos_final_programa1[7,1:].astype(float) < 3) & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_2_3 = (np.shape(becas_2_3))[1]\n",
    "\n",
    "becas_3_4 = np.where((matriz_datos_final_programa1[7,1:].astype(float) >= 3) & (matriz_datos_final_programa1[7,1:].astype(float) < 4) & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_3_4 = (np.shape(becas_3_4))[1]\n",
    "\n",
    "becas_4_5 = np.where((matriz_datos_final_programa1[7,1:].astype(float) >= 4) & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_4_5 = (np.shape(becas_4_5))[1]\n",
    "\n",
    "frecuencia_por_promedio_programa1 = [becas_0_1,becas_1_2,becas_2_3,becas_3_4,becas_4_5]\n",
    "print(\"Becas otorgadas por promedio programa 1   0 - 0.9: \" + str (becas_0_1) + \"    1 - 1.99: \" + str (becas_1_2) + \"    2 - 2.99: \" + str (becas_2_3) + \"     3 - 3.9: \" + str (becas_3_4) + \"    4 - 5: \" + str (becas_4_5))\n",
    "\n",
    "#Programa 2 promedios\n",
    "becas_0_1 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 0) & (matriz_datos_final_programa2[7,1:].astype(float) < 1) & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_0_1 = (np.shape(becas_0_1))[1]\n",
    "\n",
    "becas_1_2 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 1) & (matriz_datos_final_programa2[7,1:].astype(float) < 2) & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_1_2 = (np.shape(becas_1_2))[1]\n",
    "\n",
    "becas_2_3 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 2) & (matriz_datos_final_programa2[7,1:].astype(float) < 3) & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_2_3 = (np.shape(becas_2_3))[1]\n",
    "\n",
    "becas_3_4 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 3) & (matriz_datos_final_programa2[7,1:].astype(float) < 4) & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_3_4 = (np.shape(becas_3_4))[1]\n",
    "\n",
    "becas_4_5 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 4) & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_4_5 = (np.shape(becas_4_5))[1]\n",
    "\n",
    "frecuencia_por_promedio_programa2 = [becas_0_1,becas_1_2,becas_2_3,becas_3_4,becas_4_5]\n",
    "print(\"Becas otorgadas por promedio programa 2   0 - 0.9: \" + str (becas_0_1) + \"    1 - 1.99: \" + str (becas_1_2) + \"    2 - 2.99: \" + str (becas_2_3) + \"    3 - 3.9: \" + str (becas_3_4) + \"    4 - 5: \" + str (becas_4_5))\n",
    "\n",
    "\n",
    "#Promedio total:\n",
    "becas_0_1 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 0) & (matriz_datos_final_programa2[7,1:].astype(float) < 1))\n",
    "becas_0_1 = (np.shape(becas_0_1))[1]\n",
    "\n",
    "becas_1_2 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 1) & (matriz_datos_final_programa2[7,1:].astype(float) < 2))\n",
    "becas_1_2 = (np.shape(becas_1_2))[1]\n",
    "\n",
    "becas_2_3 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 2) & (matriz_datos_final_programa2[7,1:].astype(float) < 3))\n",
    "becas_2_3 = (np.shape(becas_2_3))[1]\n",
    "\n",
    "becas_3_4 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 3) & (matriz_datos_final_programa2[7,1:].astype(float) < 4))\n",
    "becas_3_4 = (np.shape(becas_3_4))[1]\n",
    "\n",
    "becas_4_5 = np.where((matriz_datos_final_programa2[7,1:].astype(float) >= 4))\n",
    "becas_4_5 = (np.shape(becas_4_5))[1]\n",
    "\n",
    "frecuencia_por_promedio_total = [becas_0_1,becas_1_2,becas_2_3,becas_3_4,becas_4_5]\n",
    "\n",
    "#Gráfico promedios p1-p2\n",
    "print(\"\")\n",
    "etiquetas_promedios = ['0 - 0.9','1 - 1.9','2 - 2.9','3 - 3.9','4 - 4.9']\n",
    "#frecuencia_por_programa1\n",
    "#frecuencia_por_programa2\n",
    "numero_de_grupos = len(frecuencia_por_promedio_programa1)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_promedio_programa1, width=ancho_barras, label=\"Becas programa 1\")\n",
    "plt.bar(indice_barras + ancho_barras, frecuencia_por_promedio_programa2, width=ancho_barras, label=\"Becas programa 2\")\n",
    "plt.bar(indice_barras + ancho_barras + ancho_barras,frecuencia_por_promedio_total, width=ancho_barras, label=\"Promedio total\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_promedios)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Rangos de promedios')\n",
    "plt.title('Becas otorgadas por promedios')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Programa 1 géneros\n",
    "becas_femenino = np.where((matriz_datos_final_programa1[2,1:] == 'femenino') & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_femenino= (np.shape(becas_femenino))[1]\n",
    "\n",
    "becas_masculino = np.where((matriz_datos_final_programa1[2,1:] == 'masculino') & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_masculino = (np.shape(becas_masculino))[1]\n",
    "\n",
    "becas_no_binario = np.where((matriz_datos_final_programa1[2,1:] == 'no_binario') & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_no_binario = (np.shape(becas_no_binario))[1]\n",
    "\n",
    "becas_otro = np.where((matriz_datos_final_programa1[2,1:] == 'otro') & (matriz_datos_final_programa1[8,1:] == 'SI'))\n",
    "becas_otro = (np.shape(becas_otro))[1]\n",
    "\n",
    "frecuencia_por_genero_programa1 = [becas_femenino,becas_masculino,becas_no_binario,becas_otro]\n",
    "print(\"Becas otorgadas por género programa 1   Femenino: \"+str (becas_femenino) + \"    Maculino: \"+str (becas_masculino)+ \"    No Binario: \"+str (becas_no_binario)+ \"     Otro: \"+str (becas_otro))\n",
    "\n",
    "\n",
    "#Programa 2 géneros:\n",
    "becas_femenino = np.where((matriz_datos_final_programa2[2,1:] == 'femenino') & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_femenino= (np.shape(becas_femenino))[1]\n",
    "\n",
    "becas_masculino = np.where((matriz_datos_final_programa2[2,1:] == 'masculino') & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_masculino = (np.shape(becas_masculino))[1]\n",
    "\n",
    "becas_no_binario = np.where((matriz_datos_final_programa2[2,1:] == 'no binario') & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_no_binario = (np.shape(becas_no_binario))[1]\n",
    "\n",
    "becas_otro = np.where((matriz_datos_final_programa2[2,1:] == 'otro') & (matriz_datos_final_programa2[8,1:] == 'SI'))\n",
    "becas_otro = (np.shape(becas_otro))[1]\n",
    "\n",
    "frecuencia_por_genero_programa2 = [becas_femenino,becas_masculino,becas_no_binario,becas_otro]\n",
    "print(\"Becas otorgadas por género programa 2   Femenino: \"+str (becas_femenino) + \"    Maculino: \"+str (becas_masculino)+ \"    No Binario: \"+str (becas_no_binario)+ \"    Otro: \"+str (becas_otro))\n",
    "\n",
    "#géneros total\n",
    "becas_femenino = np.where((matriz_datos_final_programa2[2,1:] == 'femenino'))\n",
    "becas_femenino= (np.shape(becas_femenino))[1]\n",
    "\n",
    "becas_masculino = np.where((matriz_datos_final_programa2[2,1:] == 'masculino'))\n",
    "becas_masculino = (np.shape(becas_masculino))[1]\n",
    "\n",
    "becas_no_binario = np.where((matriz_datos_final_programa2[2,1:] == 'no binario'))\n",
    "becas_no_binario = (np.shape(becas_no_binario))[1]\n",
    "\n",
    "becas_otro = np.where((matriz_datos_final_programa2[2,1:] == 'otro'))\n",
    "becas_otro = (np.shape(becas_otro))[1]\n",
    "\n",
    "frecuencia_por_genero_total = [becas_femenino,becas_masculino,becas_no_binario,becas_otro]\n",
    "\n",
    "#Gráfico géneros p1-p2\n",
    "print(\"\")\n",
    "etiquetas_generos = ['femenino','masculino','no_binario','otro']\n",
    "#frecuencia_por_genero_programa1\n",
    "#frecuencia_por_genero_programa2\n",
    "numero_de_grupos = len(frecuencia_por_genero_programa1)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_genero_programa1, width=ancho_barras, label=\"Becas programa 1\")\n",
    "plt.bar(indice_barras + ancho_barras, frecuencia_por_genero_programa2, width=ancho_barras, label=\"Becas programa 2\")\n",
    "plt.bar(indice_barras + ancho_barras*2, frecuencia_por_genero_total, width=ancho_barras, label=\"Total género\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_generos)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Géneros')\n",
    "plt.title('Becas otorgadas por géneros')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Tq-byDcjlRNP"
   },
   "source": [
    "## 3. Desarrollo de una solución analítica\n",
    "\n",
    "Reconociendo la complejidad de este problema (que no permite reducirlo a una dicotomía) y viendo el potencial del análisis de datos para enriquecer la discusión y los insumos para tomar decisiones, el comité ha solicitado una herramienta analítica que les permita . Sus requerimientos son:\n",
    "\n",
    "* La herramienta debe permitir ingresar una política de selección de becados.\n",
    "    * Se debe poder elegir el rango de edad de los aspirantes.\n",
    "    * Se debe poder elegir qué proporción de las becas se asigna a cada género, a cada estrato, o a cada región (pero sólo debe elegirse uno de estos criterios).\n",
    "* La herramienta debe generar un resultado que permita al comité analizar las características de la población potencialmente elegida si se usara la política ingresada.\n",
    "\n",
    "**Misión 7**\n",
    "\n",
    "Desarrollar, a partir de lo construido hasta el momento, un algoritmo que permita cumplir con los requerimientos del comité."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "hpFyY1SqlRNQ",
    "outputId": "290f5d9c-06f6-4d2e-d088-6f43ee1b49e8"
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el límite inferior del rango de edad de los aspirantes a recibir beca:  30\n",
      "Por favor ingrese el límite superior del rango de edad de los aspirantes a recibir beca:  50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 1 (total: 33):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 33\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 2 (total: 64):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 97\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 3 (total: 46):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 143\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 4 (total: 12):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 155\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 5 (total: 3):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 158\n",
      "\n",
      "No. becas asignar estrato 1: 33\n",
      "No. becas asignar estrato 2: 64\n",
      "No. becas asignar estrato 3: 46\n",
      "No. becas asignar estrato 4: 12\n",
      "No. becas asignar estrato 5: 3\n",
      "Total....................158\n",
      "\n",
      "Gráfico estratos: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico rango de edad: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico rango por promedio: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico por regiones: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico por escolaridad: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "#Nombre fila de matriz:\n",
    "#matriz_datos[0,:] = ID\n",
    "#matriz_datos[1,:] = edad\n",
    "#matriz_datos[2,:] = género\n",
    "#matriz_datos[3,:] = estado civil\n",
    "#matriz_datos[4,:] = escolaridad\n",
    "#matriz_datos[5,:] = estrato\n",
    "#matriz_datos[6,:] = región\n",
    "#matriz_datos[7,:] = promedio\n",
    "#matriz_datos[8,:] = Beca\n",
    "import math\n",
    "\n",
    "\n",
    "limite_inferior_rango_edad = int(input(\"Por favor ingrese el límite inferior del rango de edad de los aspirantes a recibir beca: \"))\n",
    "limite_superior_rango_edad = int(input(\"Por favor ingrese el límite superior del rango de edad de los aspirantes a recibir beca: \"))\n",
    "print(\"\")\n",
    "\n",
    "posibles_candidatos_e1 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '1'))\n",
    "posibles_candidatos_e1 = (np.shape(posibles_candidatos_e1))[1]\n",
    "\n",
    "posibles_candidatos_e2 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '2'))\n",
    "posibles_candidatos_e2 = (np.shape(posibles_candidatos_e2))[1]\n",
    "\n",
    "posibles_candidatos_e3 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '3'))\n",
    "posibles_candidatos_e3 = (np.shape(posibles_candidatos_e3))[1]\n",
    "\n",
    "posibles_candidatos_e4 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '4'))\n",
    "posibles_candidatos_e4 = (np.shape(posibles_candidatos_e4))[1]\n",
    "\n",
    "posibles_candidatos_e5 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '5'))\n",
    "posibles_candidatos_e5 = (np.shape(posibles_candidatos_e5))[1]\n",
    "\n",
    "total_becas_asignar = 0\n",
    "\n",
    "porcentaje_asignar_e1 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 1 (total: \"+str(posibles_candidatos_e1)+\"): \"))\n",
    "No_becas_asignar_e1 = posibles_candidatos_e1*porcentaje_asignar_e1\n",
    "No_becas_asignar_e1 = math.ceil(No_becas_asignar_e1)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e1\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e2 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 2 (total: \"+str(posibles_candidatos_e2)+\"): \"))\n",
    "No_becas_asignar_e2 = posibles_candidatos_e2*porcentaje_asignar_e2\n",
    "No_becas_asignar_e2 = math.ceil(No_becas_asignar_e2)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e2\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e3 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 3 (total: \"+str(posibles_candidatos_e3)+\"): \"))\n",
    "No_becas_asignar_e3 = posibles_candidatos_e3*porcentaje_asignar_e3\n",
    "No_becas_asignar_e3 = math.ceil(No_becas_asignar_e3)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e3\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e4 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 4 (total: \"+str(posibles_candidatos_e4)+\"): \"))\n",
    "No_becas_asignar_e4 = posibles_candidatos_e4*porcentaje_asignar_e4\n",
    "No_becas_asignar_e4 = math.ceil(No_becas_asignar_e4)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e4\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e5 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 5 (total: \"+str(posibles_candidatos_e5)+\"): \"))\n",
    "No_becas_asignar_e5 = posibles_candidatos_e5*porcentaje_asignar_e5\n",
    "No_becas_asignar_e5 = math.ceil(No_becas_asignar_e5)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e5\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "print(\"No. becas asignar estrato 1: \"+str(No_becas_asignar_e1))\n",
    "print(\"No. becas asignar estrato 2: \"+str(No_becas_asignar_e2))\n",
    "print(\"No. becas asignar estrato 3: \"+str(No_becas_asignar_e3))\n",
    "print(\"No. becas asignar estrato 4: \"+str(No_becas_asignar_e4))\n",
    "print(\"No. becas asignar estrato 5: \"+str(No_becas_asignar_e5))\n",
    "print(\"Total....................\"+str(No_becas_asignar_e1+No_becas_asignar_e2+No_becas_asignar_e3+No_becas_asignar_e4+No_becas_asignar_e5))\n",
    "\n",
    "matriz_datos_estrato1 = np.ones((9,1))\n",
    "matriz_datos_estrato2 = np.ones((9,1))\n",
    "matriz_datos_estrato3 = np.ones((9,1))\n",
    "matriz_datos_estrato4 = np.ones((9,1))\n",
    "matriz_datos_estrato5 = np.ones((9,1))\n",
    "\n",
    "for column in matriz_datos3.T:\n",
    "  if column[5] == '1':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato1 = np.append(matriz_datos_estrato1, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '2':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato2 = np.append(matriz_datos_estrato2, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '3':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato3 = np.append(matriz_datos_estrato3, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '4':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato4 = np.append(matriz_datos_estrato4, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '5':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato5 = np.append(matriz_datos_estrato5, column, axis = 1)\n",
    "\n",
    "print(\"\")\n",
    "matriz_datos_estrato1 = np.delete(matriz_datos_estrato1, 0, axis=1)\n",
    "matriz_datos_estrato1 = np.concatenate((matriz_nombres,matriz_datos_estrato1), axis=1)\n",
    "matriz_datos_estrato1 = matriz_datos_estrato1[:, matriz_datos_estrato1[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato2 = np.delete(matriz_datos_estrato2, 0, axis=1)\n",
    "matriz_datos_estrato2 = np.concatenate((matriz_nombres,matriz_datos_estrato2), axis=1)\n",
    "matriz_datos_estrato2 = matriz_datos_estrato2[:, matriz_datos_estrato2[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato3 = np.delete(matriz_datos_estrato3, 0, axis=1)\n",
    "matriz_datos_estrato3 = np.concatenate((matriz_nombres,matriz_datos_estrato3), axis=1)\n",
    "matriz_datos_estrato3 = matriz_datos_estrato3[:, matriz_datos_estrato3[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato4 = np.delete(matriz_datos_estrato4, 0, axis=1)\n",
    "matriz_datos_estrato4 = np.concatenate((matriz_nombres,matriz_datos_estrato4), axis=1)\n",
    "matriz_datos_estrato4 = matriz_datos_estrato4[:, matriz_datos_estrato4[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato5 = np.delete(matriz_datos_estrato5, 0, axis=1)\n",
    "matriz_datos_estrato5 = np.concatenate((matriz_nombres,matriz_datos_estrato5), axis=1)\n",
    "matriz_datos_estrato5 = matriz_datos_estrato5[:, matriz_datos_estrato5[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato1[8,1:No_becas_asignar_e1+1] = 'SI'\n",
    "matriz_datos_estrato2[8,1:No_becas_asignar_e2+1] = 'SI'\n",
    "matriz_datos_estrato3[8,1:No_becas_asignar_e3+1] = 'SI'\n",
    "matriz_datos_estrato4[8,1:No_becas_asignar_e4+1] = 'SI'\n",
    "matriz_datos_estrato5[8,1:No_becas_asignar_e5+1] = 'SI'\n",
    "\n",
    "#Matriz final\n",
    "\n",
    "matriz_datos_estrato2 = np.delete(matriz_datos_estrato2, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_estrato1,matriz_datos_estrato2), axis=1)\n",
    "\n",
    "matriz_datos_estrato3 = np.delete(matriz_datos_estrato3, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_final,matriz_datos_estrato3), axis=1)\n",
    "\n",
    "matriz_datos_estrato4 = np.delete(matriz_datos_estrato4, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_final,matriz_datos_estrato4), axis=1)\n",
    "\n",
    "matriz_datos_estrato5 = np.delete(matriz_datos_estrato5, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_final,matriz_datos_estrato5), axis=1)\n",
    "\n",
    "#Gráfico Estratos\n",
    "\n",
    "becas_asignadas_estratos = [No_becas_asignar_e1,No_becas_asignar_e2,No_becas_asignar_e3,No_becas_asignar_e4,No_becas_asignar_e5]\n",
    "total_pob_estrato_rango = [posibles_candidatos_e1,posibles_candidatos_e2,posibles_candidatos_e3,posibles_candidatos_e4,posibles_candidatos_e5]\n",
    "\n",
    "\n",
    "print(\"Gráfico estratos: \")\n",
    "print(\"\")\n",
    "etiquetas_estratos = ['Estrato 1', 'Estrato 2','Estrato 3','Estrato 4','Estrato 5']\n",
    "#becas_asignadas_estratos\n",
    "#total_pob_estrato_rango\n",
    "numero_de_grupos = len(becas_asignadas_estratos)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras, becas_asignadas_estratos, width=ancho_barras, label=\"Becas por estrato\")\n",
    "plt.bar(indice_barras + ancho_barras, total_pob_estrato_rango, width=ancho_barras, label=\"Pob-rango estrato\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_estratos, rotation=60)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Estratos')\n",
    "plt.title('Becas otorgadas por estrato')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por rango edad\n",
    "rango_10_19 = np.where((matriz_datos_final[1,1:].astype(float) >= 10) & (matriz_datos_final[1,1:].astype(float) <= 19) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_10_19 = (np.shape(rango_10_19))[1]\n",
    "\n",
    "rango_20_29 = np.where((matriz_datos_final[1,1:].astype(float) >= 20) & (matriz_datos_final[1,1:].astype(float) <= 29) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_20_29 = (np.shape(rango_20_29))[1]\n",
    "\n",
    "rango_30_39 = np.where((matriz_datos_final[1,1:].astype(float) >= 30) & (matriz_datos_final[1,1:].astype(float) <= 39) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_30_39 = (np.shape(rango_30_39))[1]\n",
    "\n",
    "rango_40_49 = np.where((matriz_datos_final[1,1:].astype(float) >= 40) & (matriz_datos_final[1,1:].astype(float) <= 49) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_40_49 = (np.shape(rango_40_49))[1]\n",
    "\n",
    "rango_50_59 = np.where((matriz_datos_final[1,1:].astype(float) >= 50) & (matriz_datos_final[1,1:].astype(float) <= 59) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_50_59 = (np.shape(rango_50_59))[1]\n",
    "\n",
    "rango_60_69 = np.where((matriz_datos_final[1,1:].astype(float) >= 60) & (matriz_datos_final[1,1:].astype(float) <= 69) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_60_69 = (np.shape(rango_60_69))[1]\n",
    "\n",
    "rango_mas_70 = np.where((matriz_datos3[1,1:].astype(float) >= 70) & (matriz_datos3[8,1:] == 'SI'))\n",
    "rango_mas_70 = (np.shape(rango_mas_70))[1]\n",
    "\n",
    "frecuencia_por_edad = [rango_10_19, rango_20_29, rango_30_39, rango_40_49, rango_50_59, rango_60_69, rango_mas_70]\n",
    "etiquetas_rangos = ['10 - 19','20 - 29','30 - 39','40 - 49','50 - 59','60 - 69','> 70']\n",
    "\n",
    "print(\"Gráfico rango de edad: \")\n",
    "print(\"\")\n",
    "etiquetas_rangos = ['10 - 19','20 - 29','30 - 39','40 - 49','50 - 59','60 - 69','> 70']\n",
    "#frecuencia_por_edad\n",
    "numero_de_grupos = len(frecuencia_por_edad)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_edad, width=ancho_barras, label=\"becas por rango de edad\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_rangos)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Rangos de edad')\n",
    "plt.title('Becas otorgadas por rangos de edad')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por promedio\n",
    "rango_0_1 = np.where((matriz_datos_final[7,1:].astype(float) >= 0) & (matriz_datos_final[7,1:].astype(float) <= 0.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_0_1 = (np.shape(rango_0_1))[1]\n",
    "\n",
    "rango_1_2 = np.where((matriz_datos_final[7,1:].astype(float) >= 1) & (matriz_datos_final[7,1:].astype(float) <= 1.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_1_2 = (np.shape(rango_1_2))[1]\n",
    "\n",
    "rango_2_3 = np.where((matriz_datos_final[7,1:].astype(float) >= 2) & (matriz_datos_final[7,1:].astype(float) <= 2.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_2_3 = (np.shape(rango_2_3))[1]\n",
    "\n",
    "rango_3_4 = np.where((matriz_datos_final[7,1:].astype(float) >= 3) & (matriz_datos_final[7,1:].astype(float) <= 3.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_3_4 = (np.shape(rango_3_4))[1]\n",
    "\n",
    "rango_mas_4 = np.where((matriz_datos_final[7,1:].astype(float) >= 4) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_mas_4 = (np.shape(rango_mas_4))[1]\n",
    "\n",
    "frecuencia_por_rango_promedio = [rango_0_1,rango_1_2,rango_2_3,rango_3_4,rango_mas_4]\n",
    "\n",
    "print(\"Gráfico rango por promedio: \")\n",
    "print(\"\")\n",
    "etiquetas_rangos = ['0 - 0.9','1 - 1.9','2 - 2.9','3 - 3.9','4 - 4.9']\n",
    "#frecuencia_por_edad\n",
    "numero_de_grupos = len(frecuencia_por_rango_promedio)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_rango_promedio, width=ancho_barras, label=\"becas por promedio\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_rangos)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Rangos de promedio')\n",
    "plt.title('Becas por promedio')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por región\n",
    "region_amazonia = np.where((matriz_datos_final[6,1:] == 'Amazonia') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_amazonia = (np.shape(region_amazonia))[1]\n",
    "\n",
    "region_andina = np.where((matriz_datos_final[6,1:] == 'Andina') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_andina = (np.shape(region_andina))[1]\n",
    "\n",
    "region_caribe = np.where((matriz_datos_final[6,1:] == 'Caribe') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_caribe = (np.shape(region_caribe))[1]\n",
    "\n",
    "region_orinoquia = np.where((matriz_datos_final[6,1:] == 'Orinoquia') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_orinoquia = (np.shape(region_orinoquia))[1]\n",
    "\n",
    "region_pacifica = np.where((matriz_datos_final[6,1:] == 'Pacifica') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_pacifica = (np.shape(region_pacifica))[1]\n",
    "\n",
    "frecuencia_por_region = [region_amazonia,region_andina,region_caribe,region_orinoquia,region_pacifica]\n",
    "\n",
    "print(\"Gráfico por regiones: \")\n",
    "print(\"\")\n",
    "etiquetas_regiones = ['Amazonia','Andina','Caribe','Orinoquia','Pacifica']\n",
    "#frecuencia_por_region\n",
    "numero_de_grupos = len(frecuencia_por_region)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_region, width=ancho_barras, label=\"becas por región\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_regiones)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Regiones')\n",
    "plt.title('Becas otorgadas por región')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por escolaridad\n",
    "escolaridad_primaria = np.where((matriz_datos_final[4,1:] == 'Primaria') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_primaria = (np.shape(escolaridad_primaria))[1]\n",
    "\n",
    "escolaridad_secundaria = np.where((matriz_datos_final[4,1:] == 'Secundaria') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_secundaria = (np.shape(escolaridad_secundaria))[1]\n",
    "\n",
    "escolaridad_profesional = np.where((matriz_datos_final[4,1:] == 'Profesional') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_profesional = (np.shape(escolaridad_profesional))[1]\n",
    "\n",
    "escolaridad_maestria = np.where((matriz_datos_final[4,1:] == 'Maestria') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_maestria = (np.shape(escolaridad_maestria))[1]\n",
    "\n",
    "frecuencia_por_escolaridad = [escolaridad_primaria,escolaridad_secundaria,escolaridad_profesional,escolaridad_maestria]\n",
    "\n",
    "print(\"Gráfico por escolaridad: \")\n",
    "print(\"\")\n",
    "etiquetas_escolaridad = ['Primaria','Secundaria','Profesional','Maestría']\n",
    "#frecuencia_por_region\n",
    "numero_de_grupos = len(frecuencia_por_escolaridad)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_escolaridad, width=ancho_barras, label=\"becas por nivel escolaridad\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_escolaridad)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Nivel escolaridad')\n",
    "plt.title('Becas otorgadas por nivel de escolaridad')\n",
    "plt.show()\n",
    "print(\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4wIIpnYElRNU"
   },
   "source": [
    "**Misión 8**\n",
    "\n",
    "Proponer, con base en tu propio uso de la herramienta, una política de ingreso que consideres apropiada dado el contexto proporcionado. Si lo crees adecuado, explica, máximo 500 caracteres, las virtudes de tu propuesta (esto puede estar soportado en los datos, o no)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "VreFNM_OlRNV"
   },
   "outputs": [],
   "source": [
    "# respuesta en texto (solo leeremos los primeros 300 caracteres de la respuesta)\n",
    "\n",
    "respuesta = 'Mi propuesta consiste en otorgar las becas a los mejores promedios por estrato, iniciando por el estrato 1 y de manera ascendente, según porcentaje de participación de la población por estrato. Adicionalmente, dadas las características de las poblaciones, considero pertienente que se excluyan las personas mayores de 60 años y aquellos aspirantes que tengan nivel de escolaridad primaria'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Owj4831xlRNX"
   },
   "source": [
    "**Misión 9**\n",
    "\n",
    "Ejecutar el algoritmo desarrollado en la *Misión 7* sobre la política que sugieres proponer al comité. Explicar claramente tus conlusiones con el soporte de los resultados de la herramienta."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "6Cl0sVXglRNY",
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el límite inferior del rango de edad de los aspirantes a recibir beca:  10\n",
      "Por favor ingrese el límite superior del rango de edad de los aspirantes a recibir beca:  58\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 1 (total: 79):  0.22\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 18\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 2 (total: 128):  0.37\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 66\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 3 (total: 97):  0.31\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 97\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 4 (total: 20):  0.07\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 99\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 5 (total: 9):  0.026\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total becas a asignar: 100\n",
      "\n",
      "No. becas asignar estrato 1: 18\n",
      "No. becas asignar estrato 2: 48\n",
      "No. becas asignar estrato 3: 31\n",
      "No. becas asignar estrato 4: 2\n",
      "No. becas asignar estrato 5: 1\n",
      "Total....................100\n",
      "\n",
      "Gráfico estratos: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico rango de edad: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico rango por promedio: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gráfico por regiones: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Se excluyen los aspirantes con grado de escolaridad primaria: 6aspirantes\n",
      "Gráfico por escolaridad: \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# código\n",
    "#Nombre fila de matriz:\n",
    "#matriz_datos[0,:] = ID\n",
    "#matriz_datos[1,:] = edad\n",
    "#matriz_datos[2,:] = género\n",
    "#matriz_datos[3,:] = estado civil\n",
    "#matriz_datos[4,:] = escolaridad\n",
    "#matriz_datos[5,:] = estrato\n",
    "#matriz_datos[6,:] = región\n",
    "#matriz_datos[7,:] = promedio\n",
    "#matriz_datos[8,:] = Beca\n",
    "import math\n",
    "\n",
    "\n",
    "limite_inferior_rango_edad = int(input(\"Por favor ingrese el límite inferior del rango de edad de los aspirantes a recibir beca: \"))\n",
    "limite_superior_rango_edad = int(input(\"Por favor ingrese el límite superior del rango de edad de los aspirantes a recibir beca: \"))\n",
    "print(\"\")\n",
    "\n",
    "posibles_candidatos_e1 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '1'))\n",
    "posibles_candidatos_e1 = (np.shape(posibles_candidatos_e1))[1]\n",
    "\n",
    "posibles_candidatos_e2 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '2'))\n",
    "posibles_candidatos_e2 = (np.shape(posibles_candidatos_e2))[1]\n",
    "\n",
    "posibles_candidatos_e3 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '3'))\n",
    "posibles_candidatos_e3 = (np.shape(posibles_candidatos_e3))[1]\n",
    "\n",
    "posibles_candidatos_e4 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '4'))\n",
    "posibles_candidatos_e4 = (np.shape(posibles_candidatos_e4))[1]\n",
    "\n",
    "posibles_candidatos_e5 = np.where((matriz_datos3[1,1:].astype(int) >= limite_inferior_rango_edad) & (matriz_datos3[1,1:].astype(int) <= limite_superior_rango_edad) & (matriz_datos3[5,1:] == '5'))\n",
    "posibles_candidatos_e5 = (np.shape(posibles_candidatos_e5))[1]\n",
    "\n",
    "total_becas_asignar = 0\n",
    "\n",
    "porcentaje_asignar_e1 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 1 (total: \"+str(posibles_candidatos_e1)+\"): \"))\n",
    "No_becas_asignar_e1 = posibles_candidatos_e1*porcentaje_asignar_e1\n",
    "No_becas_asignar_e1 = math.ceil(No_becas_asignar_e1)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e1\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e2 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 2 (total: \"+str(posibles_candidatos_e2)+\"): \"))\n",
    "No_becas_asignar_e2 = posibles_candidatos_e2*porcentaje_asignar_e2\n",
    "No_becas_asignar_e2 = math.ceil(No_becas_asignar_e2)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e2\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e3 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 3 (total: \"+str(posibles_candidatos_e3)+\"): \"))\n",
    "No_becas_asignar_e3 = posibles_candidatos_e3*porcentaje_asignar_e3\n",
    "No_becas_asignar_e3 = math.ceil(No_becas_asignar_e3)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e3\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e4 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 4 (total: \"+str(posibles_candidatos_e4)+\"): \"))\n",
    "No_becas_asignar_e4 = posibles_candidatos_e4*porcentaje_asignar_e4\n",
    "No_becas_asignar_e4 = math.ceil(No_becas_asignar_e4)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e4\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "porcentaje_asignar_e5 = float(input(\"Por favor ingrese el porcentaje (0-1) de becas a entregar para estrato 5 (total: \"+str(posibles_candidatos_e5)+\"): \"))\n",
    "No_becas_asignar_e5 = posibles_candidatos_e5*porcentaje_asignar_e5\n",
    "No_becas_asignar_e5 = math.ceil(No_becas_asignar_e5)\n",
    "total_becas_asignar = total_becas_asignar + No_becas_asignar_e5\n",
    "print(\"Total becas a asignar: \"+str(total_becas_asignar))\n",
    "print(\"\")\n",
    "\n",
    "print(\"No. becas asignar estrato 1: \"+str(No_becas_asignar_e1))\n",
    "print(\"No. becas asignar estrato 2: \"+str(No_becas_asignar_e2))\n",
    "print(\"No. becas asignar estrato 3: \"+str(No_becas_asignar_e3))\n",
    "print(\"No. becas asignar estrato 4: \"+str(No_becas_asignar_e4))\n",
    "print(\"No. becas asignar estrato 5: \"+str(No_becas_asignar_e5))\n",
    "print(\"Total....................\"+str(No_becas_asignar_e1+No_becas_asignar_e2+No_becas_asignar_e3+No_becas_asignar_e4+No_becas_asignar_e5))\n",
    "\n",
    "matriz_datos_estrato1 = np.ones((9,1))\n",
    "matriz_datos_estrato2 = np.ones((9,1))\n",
    "matriz_datos_estrato3 = np.ones((9,1))\n",
    "matriz_datos_estrato4 = np.ones((9,1))\n",
    "matriz_datos_estrato5 = np.ones((9,1))\n",
    "\n",
    "for column in matriz_datos3.T:\n",
    "  if column[5] == '1':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato1 = np.append(matriz_datos_estrato1, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '2':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato2 = np.append(matriz_datos_estrato2, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '3':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato3 = np.append(matriz_datos_estrato3, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '4':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato4 = np.append(matriz_datos_estrato4, column, axis = 1)\n",
    "\n",
    "  elif column[5] == '5':\n",
    "    column = np.reshape(column, (9,1))\n",
    "    matriz_datos_estrato5 = np.append(matriz_datos_estrato5, column, axis = 1)\n",
    "\n",
    "print(\"\")\n",
    "matriz_datos_estrato1 = np.delete(matriz_datos_estrato1, 0, axis=1)\n",
    "matriz_datos_estrato1 = np.concatenate((matriz_nombres,matriz_datos_estrato1), axis=1)\n",
    "matriz_datos_estrato1 = matriz_datos_estrato1[:, matriz_datos_estrato1[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato2 = np.delete(matriz_datos_estrato2, 0, axis=1)\n",
    "matriz_datos_estrato2 = np.concatenate((matriz_nombres,matriz_datos_estrato2), axis=1)\n",
    "matriz_datos_estrato2 = matriz_datos_estrato2[:, matriz_datos_estrato2[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato3 = np.delete(matriz_datos_estrato3, 0, axis=1)\n",
    "matriz_datos_estrato3 = np.concatenate((matriz_nombres,matriz_datos_estrato3), axis=1)\n",
    "matriz_datos_estrato3 = matriz_datos_estrato3[:, matriz_datos_estrato3[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato4 = np.delete(matriz_datos_estrato4, 0, axis=1)\n",
    "matriz_datos_estrato4 = np.concatenate((matriz_nombres,matriz_datos_estrato4), axis=1)\n",
    "matriz_datos_estrato4 = matriz_datos_estrato4[:, matriz_datos_estrato4[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato5 = np.delete(matriz_datos_estrato5, 0, axis=1)\n",
    "matriz_datos_estrato5 = np.concatenate((matriz_nombres,matriz_datos_estrato5), axis=1)\n",
    "matriz_datos_estrato5 = matriz_datos_estrato5[:, matriz_datos_estrato5[7].argsort()[::-1]]\n",
    "\n",
    "matriz_datos_estrato1[8,1:No_becas_asignar_e1+1] = 'SI'\n",
    "matriz_datos_estrato2[8,1:No_becas_asignar_e2+1] = 'SI'\n",
    "matriz_datos_estrato3[8,1:No_becas_asignar_e3+1] = 'SI'\n",
    "matriz_datos_estrato4[8,1:No_becas_asignar_e4+1] = 'SI'\n",
    "matriz_datos_estrato5[8,1:No_becas_asignar_e5+1] = 'SI'\n",
    "\n",
    "#Matriz final\n",
    "\n",
    "matriz_datos_estrato2 = np.delete(matriz_datos_estrato2, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_estrato1,matriz_datos_estrato2), axis=1)\n",
    "\n",
    "matriz_datos_estrato3 = np.delete(matriz_datos_estrato3, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_final,matriz_datos_estrato3), axis=1)\n",
    "\n",
    "matriz_datos_estrato4 = np.delete(matriz_datos_estrato4, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_final,matriz_datos_estrato4), axis=1)\n",
    "\n",
    "matriz_datos_estrato5 = np.delete(matriz_datos_estrato5, 0, axis=1)\n",
    "matriz_datos_final = np.concatenate((matriz_datos_final,matriz_datos_estrato5), axis=1)\n",
    "\n",
    "#Gráfico Estratos\n",
    "\n",
    "becas_asignadas_estratos = [No_becas_asignar_e1,No_becas_asignar_e2,No_becas_asignar_e3,No_becas_asignar_e4,No_becas_asignar_e5]\n",
    "total_pob_estrato_rango = [posibles_candidatos_e1,posibles_candidatos_e2,posibles_candidatos_e3,posibles_candidatos_e4,posibles_candidatos_e5]\n",
    "\n",
    "\n",
    "print(\"Gráfico estratos: \")\n",
    "print(\"\")\n",
    "etiquetas_estratos = ['Estrato 1', 'Estrato 2','Estrato 3','Estrato 4','Estrato 5']\n",
    "#becas_asignadas_estratos\n",
    "#total_pob_estrato_rango\n",
    "numero_de_grupos = len(becas_asignadas_estratos)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras, becas_asignadas_estratos, width=ancho_barras, label=\"Becas por estrato\")\n",
    "plt.bar(indice_barras + ancho_barras, total_pob_estrato_rango, width=ancho_barras, label=\"Pob-rango estrato\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_estratos, rotation=60)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Estratos')\n",
    "plt.title('Becas otorgadas por estrato')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por rango edad\n",
    "rango_10_19 = np.where((matriz_datos_final[1,1:].astype(float) >= 10) & (matriz_datos_final[1,1:].astype(float) <= 19) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_10_19 = (np.shape(rango_10_19))[1]\n",
    "\n",
    "rango_20_29 = np.where((matriz_datos_final[1,1:].astype(float) >= 20) & (matriz_datos_final[1,1:].astype(float) <= 29) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_20_29 = (np.shape(rango_20_29))[1]\n",
    "\n",
    "rango_30_39 = np.where((matriz_datos_final[1,1:].astype(float) >= 30) & (matriz_datos_final[1,1:].astype(float) <= 39) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_30_39 = (np.shape(rango_30_39))[1]\n",
    "\n",
    "rango_40_49 = np.where((matriz_datos_final[1,1:].astype(float) >= 40) & (matriz_datos_final[1,1:].astype(float) <= 49) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_40_49 = (np.shape(rango_40_49))[1]\n",
    "\n",
    "rango_50_59 = np.where((matriz_datos_final[1,1:].astype(float) >= 50) & (matriz_datos_final[1,1:].astype(float) <= 59) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_50_59 = (np.shape(rango_50_59))[1]\n",
    "\n",
    "rango_60_69 = np.where((matriz_datos_final[1,1:].astype(float) >= 60) & (matriz_datos_final[1,1:].astype(float) <= 69) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_60_69 = (np.shape(rango_60_69))[1]\n",
    "\n",
    "rango_mas_70 = np.where((matriz_datos3[1,1:].astype(float) >= 70) & (matriz_datos3[8,1:] == 'SI'))\n",
    "rango_mas_70 = (np.shape(rango_mas_70))[1]\n",
    "\n",
    "frecuencia_por_edad = [rango_10_19, rango_20_29, rango_30_39, rango_40_49, rango_50_59, rango_60_69, rango_mas_70]\n",
    "etiquetas_rangos = ['10 - 19','20 - 29','30 - 39','40 - 49','50 - 59','60 - 69','> 70']\n",
    "\n",
    "print(\"Gráfico rango de edad: \")\n",
    "print(\"\")\n",
    "etiquetas_rangos = ['10 - 19','20 - 29','30 - 39','40 - 49','50 - 59','60 - 69','> 70']\n",
    "#frecuencia_por_edad\n",
    "numero_de_grupos = len(frecuencia_por_edad)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_edad, width=ancho_barras, label=\"becas por rango de edad\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_rangos)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Rangos de edad')\n",
    "plt.title('Becas otorgadas por rangos de edad')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por promedio\n",
    "rango_0_1 = np.where((matriz_datos_final[7,1:].astype(float) >= 0) & (matriz_datos_final[7,1:].astype(float) <= 0.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_0_1 = (np.shape(rango_0_1))[1]\n",
    "\n",
    "rango_1_2 = np.where((matriz_datos_final[7,1:].astype(float) >= 1) & (matriz_datos_final[7,1:].astype(float) <= 1.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_1_2 = (np.shape(rango_1_2))[1]\n",
    "\n",
    "rango_2_3 = np.where((matriz_datos_final[7,1:].astype(float) >= 2) & (matriz_datos_final[7,1:].astype(float) <= 2.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_2_3 = (np.shape(rango_2_3))[1]\n",
    "\n",
    "rango_3_4 = np.where((matriz_datos_final[7,1:].astype(float) >= 3) & (matriz_datos_final[7,1:].astype(float) <= 3.9) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_3_4 = (np.shape(rango_3_4))[1]\n",
    "\n",
    "rango_mas_4 = np.where((matriz_datos_final[7,1:].astype(float) >= 4) & (matriz_datos_final[8,1:] == 'SI'))\n",
    "rango_mas_4 = (np.shape(rango_mas_4))[1]\n",
    "\n",
    "frecuencia_por_rango_promedio = [rango_0_1,rango_1_2,rango_2_3,rango_3_4,rango_mas_4]\n",
    "\n",
    "print(\"Gráfico rango por promedio: \")\n",
    "print(\"\")\n",
    "etiquetas_rangos = ['0 - 0.9','1 - 1.9','2 - 2.9','3 - 3.9','4 - 4.9']\n",
    "#frecuencia_por_edad\n",
    "numero_de_grupos = len(frecuencia_por_rango_promedio)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_rango_promedio, width=ancho_barras, label=\"becas por promedio\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_rangos)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Rangos de promedio')\n",
    "plt.title('Becas por promedio')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por región\n",
    "region_amazonia = np.where((matriz_datos_final[6,1:] == 'Amazonia') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_amazonia = (np.shape(region_amazonia))[1]\n",
    "\n",
    "region_andina = np.where((matriz_datos_final[6,1:] == 'Andina') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_andina = (np.shape(region_andina))[1]\n",
    "\n",
    "region_caribe = np.where((matriz_datos_final[6,1:] == 'Caribe') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_caribe = (np.shape(region_caribe))[1]\n",
    "\n",
    "region_orinoquia = np.where((matriz_datos_final[6,1:] == 'Orinoquia') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_orinoquia = (np.shape(region_orinoquia))[1]\n",
    "\n",
    "region_pacifica = np.where((matriz_datos_final[6,1:] == 'Pacifica') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "region_pacifica = (np.shape(region_pacifica))[1]\n",
    "\n",
    "frecuencia_por_region = [region_amazonia,region_andina,region_caribe,region_orinoquia,region_pacifica]\n",
    "\n",
    "print(\"Gráfico por regiones: \")\n",
    "print(\"\")\n",
    "etiquetas_regiones = ['Amazonia','Andina','Caribe','Orinoquia','Pacifica']\n",
    "#frecuencia_por_region\n",
    "numero_de_grupos = len(frecuencia_por_region)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_region, width=ancho_barras, label=\"becas por región\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_regiones)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Regiones')\n",
    "plt.title('Becas otorgadas por región')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "#Gráfico por escolaridad\n",
    "escolaridad_primaria = np.where((matriz_datos_final[4,1:] == 'Primaria') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_primaria = (np.shape(escolaridad_primaria))[1]\n",
    "\n",
    "escolaridad_secundaria = np.where((matriz_datos_final[4,1:] == 'Secundaria') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_secundaria = (np.shape(escolaridad_secundaria))[1]\n",
    "\n",
    "escolaridad_profesional = np.where((matriz_datos_final[4,1:] == 'Profesional') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_profesional = (np.shape(escolaridad_profesional))[1]\n",
    "\n",
    "escolaridad_maestria = np.where((matriz_datos_final[4,1:] == 'Maestria') & (matriz_datos_final[8,1:] == 'SI'))\n",
    "escolaridad_maestria = (np.shape(escolaridad_maestria))[1]\n",
    "\n",
    "frecuencia_por_escolaridad = [escolaridad_primaria,escolaridad_secundaria,escolaridad_profesional,escolaridad_maestria]\n",
    "print(\"Se excluyen los aspirantes con grado de escolaridad primaria: \" + str (escolaridad_primaria) + \" aspirantes\")\n",
    "\n",
    "print(\"Gráfico por escolaridad: \")\n",
    "print(\"\")\n",
    "etiquetas_escolaridad = ['Primaria','Secundaria','Profesional','Maestría']\n",
    "#frecuencia_por_region\n",
    "numero_de_grupos = len(frecuencia_por_escolaridad)\n",
    "indice_barras = np.arange(numero_de_grupos)\n",
    "ancho_barras = 0.35\n",
    "plt.bar(indice_barras,frecuencia_por_escolaridad, width=ancho_barras, label=\"becas por nivel escolaridad\")\n",
    "plt.legend(loc = 'best')\n",
    "plt.xticks(indice_barras+ancho_barras,etiquetas_escolaridad)\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.xlabel('Nivel escolaridad')\n",
    "plt.title('Becas otorgadas por nivel de escolaridad')\n",
    "plt.show()\n",
    "print(\"\")\n",
    "\n",
    "\n",
    "conclusion = 'Al ingresar como límite de edad hasta 59 años, con la proporción actual de cada estrato (estrato 1: 22%, estrato 2: 37%, estrato 3: 31.2%, estrato 4: 7% y estrato 5: 2.6%), se puede observar que se logra distribuir las becas favoreciendo a la población con menos recursos al mismo tiempo que se reconoce la excelencia académica al tener presente los mejores promedios. Al considerar el porcentaje de participación de cada estrato, de igual manera otorgamos equidad en cada estrato'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BIY5VMXdlRNZ"
   },
   "source": [
    "## Referencias\n",
    "* Discriminación Positiva<br> \n",
    "https://es.wikipedia.org/wiki/Discriminaci%C3%B3n_positiva\n",
    "* Análisis de formulación del programa “Ser Pilo Paga”<br>\n",
    "https://repository.urosario.edu.co/handle/10336/12526\n",
    "* La acción afirmativa en la Universidad de los Andes: El caso del programa \"Oportunidades para talentos nacionales\"<br> http://www.scielo.org.co/scielo.php?script=sci_arttext&pid=S0123-885X2004000300005\n",
    "* Acción afirmativa y equidad: un análisis desde la propuesta de Thomas Nagel<br>\n",
    "http://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S2007-24062016000200049"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4dgfeyi8lRNb"
   },
   "source": [
    "## Créditos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tPJhVpkwlRNc"
   },
   "source": [
    "Camilo Gómez - 11/06/21<br>\n",
    "*Revisado*: 25/08/21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "uMs6X3TOlRNd"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "HCAD_Laboratorio_1_Andrea Herrera-FINAL.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
